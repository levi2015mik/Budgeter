{"version":3,"sources":["components/categories/Categories.module.css","components/Calendar/Calendar.module.css","components/Header.jsx","components/home/Entry.jsx","components/Calendar/Selector.jsx","components/Calendar/MainTable.jsx","components/Calendar/Calendar.jsx","components/Calendar/SmallCalendar.jsx","components/home/Home.jsx","redux/HomeReducer.js","redux/TasksAccountsReducer.js","redux/actor.js","components/home/HomeWraper.jsx","redux/selectors.js","components/categories/Categories.jsx","components/info/Info.jsx","redux/HelpReducer.js","components/info/InfoContainer.js","components/Help.jsx","redux/mystore.js","components/Account/FormData.js","components/Account/elements.jsx","components/Account/Account.jsx","components/Account/validate.js","components/Account/accountContainer.js","components/Data/Data.jsx","App.js","serviceWorker.js","index.js","components/info/info.module.css","components/Account/account.module.css","components/home/Entry.module.css","components/Header.module.css","components/home/home.module.css","app.module.css","components/Data/Data.module.css"],"names":["module","exports","Header","props","className","css","header","src","logo","alt","to","Entry","id","gray","accepted","color","NameStr","account","name","entry","type","key","disabled","onChange","toggleElSelect","checked","selected","textContainer","style","htmlFor","btnContainer","value","onClick","accept","del","Selector","day","showYear","subNow","toggleEl","month","year","addDate","MainTable","moment","locale","weekStr","weekCorrector","startMonth","endMonth","dayNames","week","weekdaysShort","dayNum","styleDirection","direction","i","j","selectedDate","map","el","selector","targeted","val","changeSelectedDate","Calendar","monthNames","months","useState","now","setNow","viewType","setViewType","setSelector","selectorChange","ev","currentTarget","date","setSelectedDate","daysInMonth","element","label","display","pos","newNow","subtract","add","cal","output","SmallCalendar","marginRight","valueOf","Home","useEffect","activateDataFilter","go","path","redirect","setRedirect","preAcceptEl","preAcceptElement","entries","home","dateSelect","textFieldValue","changeTextField","target","placeholder","changeActivateTime","activateTaskTime","addNewEntry","preAcceptSelected","deleteSelected","changeSelectedAll","filter","changeElSelection","deleteEntrie","ADD_NEW_ENTRY","CHANGE_ENTER_FIELD","DELETE","CHANGE_SELECTION","CHANGE_SELECTION_ALL","REFRESH_ALL","CHANGE_TASK_ACTIVATE_TIME","CHANGE_FILTER","DEFAULT_STATE","filteredEntries","newEntryName","newTask","deleteEntry","refreshEntries","tasks","changeFilter","HomeReducer","state","action","time","ADD_TASK","ADD_EMPTY_ACCOUNT","SUBMIT_ACCOUNT","LINK_TASKS_TO_ACCOUNT","REFRASH_ALL","ADD_CATEGORIES","activated","accounts","newAccountId","nextTaskId","categories","addNewTask","delTask","addNewAccount","linkTasks","accountId","SubmitAccount","data","content","TasksAccountsReducer","tasksArr","length","newAccount","newTasksData","some","num","result","newTaskId","insertedObj","price","names","Date","forEach","undefined","push","tasksFilter","params","conditions","CalendarCallback","filterTime","dispatch","getState","insertedData","isSame","addTask","TasksCcountsReducer","delForId","values","ids","isNewTask","join","mapDispatchToProps","actor","sign","connect","countTimePeriodsInAccounts","period","counter","AVGOfPeriod","avgRes","periods","Number","res","isNaN","AVGAccountsOfPeriod","getAccounts","FilteredAccounts","createSelector","HelpReducer","InfoTime","currentTimeFilter","CurrentSum","reduce","sum","CountAccountsFromFiltered","CountTasksOfSelected","AVGDay","AVWeek","AVGMonth","AVGYear","getAVGAccountsOfDay","getAVGAccountsOfWeek","getAVGAccountsOfMonth","getAVGAccountsOfYear","getUnfilteredCategories","Object","keys","avg","category","count","getCategoryAvg","avgTime","intervals","memo","getCategoryAVGTime","Row","Math","floor","Info","info","infoTb","setTime","INFO_SET_TIME","selectors","Help","reducers","combineReducers","form","formReducer","store","createStore","load","states","applyMiddleware","thunk","save","FormData","createContext","Input","Consumer","context","input","e","meta","touched","error","warning","SimpleInput","NamesList","lockBtn","setLockBtn","fields","index","Field","component","pushEmptyElement","remove","removeElement","Params","FieldArray","Param","out","Formed","reduxForm","initialValues","validate","errors","_error","handleSubmit","Form","onSubmit","valid","exit","AccountReduxForm","Account","isAccepted","match","currentAccountId","timeData","timeString","rawNames","format","err","history","split","toLowerCase","trim","initialize","dateTime","Provider","addCategories","withRouter","refresh","JSON","stringify","jsonDump","setJsonDump","warn","cols","rows","localStorage","clear","window","location","reload","dataObj","parse","alert","App","exact","render","HomeWraper","InfoContainer","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14d985bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"categories\":\"Categories_categories__HjS2t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"element\":\"Calendar_element__1Ktaq\",\"label\":\"Calendar_label__2T9-A\",\"cal\":\"Calendar_cal__3z9-c\",\"header\":\"Calendar_header__15GaA\",\"selector\":\"Calendar_selector__1NxqG\",\"selected\":\"Calendar_selected__2escT\",\"targeted\":\"Calendar_targeted__K-Ch0\"};","import React from \"react\";\r\nimport css from './Header.module.css'\r\nimport { NavLink} from \"react-router-dom\";\r\nfunction Header(props) {\r\n    return(\r\n        <header className={css.header}>\r\n\r\n            <img src={\"/icons8-doodle-64.png\"} className={css.logo} alt={\"\"}/>\r\n            <h1>Personal accounting application</h1>\r\n            <ul>\r\n                <li><NavLink to=\"/\" >Home</NavLink></li>\r\n                <li><NavLink to=\"/categories\" >Categories</NavLink></li>\r\n                <li><NavLink to=\"/info\" >Info</NavLink></li>\r\n                <li><NavLink to=\"/help\" >Help</NavLink></li>\r\n                <li><NavLink to=\"/data\" >Data*</NavLink></li>\r\n            </ul>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\nimport css from \"./Entry.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Entry(props) {\r\n    let id = props.id;\r\n    let gray = props.accepted? {color: \"#bbbbbb\"}: {color:\"#000\"};\r\n    let NameStr = (props.accepted)? (<NavLink to={\"/account/\" + props.account}>{props.name}</NavLink>):props.name;\r\n    return(\r\n        <div className={css.entry}>\r\n            <input\r\n                type=\"checkbox\"\r\n                id = {id}\r\n                key = {id}\r\n                disabled = {props.accepted}\r\n                onChange = {()=>{props.toggleElSelect(id)}}\r\n                checked={props.selected}\r\n            />\r\n\r\n            <span className={css.textContainer} style={gray}>\r\n                <label htmlFor={id}>\r\n                    {NameStr}\r\n                </label>\r\n            </span>\r\n            <span className={css.btnContainer}>\r\n                <input\r\n                    type=\"button\"\r\n                    value=\"V\"\r\n                    disabled={props.accepted}\r\n                    onClick={()=>{props.accept(id)}}\r\n                />\r\n\r\n                <input\r\n                    type=\"button\"\r\n                    value=\"X\"\r\n                    disabled={props.accepted}\r\n                    onClick={()=>{props.del(id)}}\r\n                />\r\n            </span>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Entry;","import React from \"react\"\r\n\r\n/**\r\n * Модуль выбора месяца и года с выводом текущей позиции\r\n * TODO Добавить кастомизацию через css\r\n * @param {Object} props\r\n * {\r\n *  day? Дата\r\n *  month\r\n *  year\r\n *  {boolean} showYear? Показывать ли кнопки смены года\r\n *  {function} subNow Уменьшение даты\r\n *  {function} addDate Увеличение даты\r\n *  {function} toggleEl Показать / скрыть календарь\r\n * }\r\n * @constructor\r\n */\r\nfunction Selector(props) {\r\n    let day = typeof(props.day) !== \"undefined\"? props.day:\"\";\r\n    let showYear = typeof(props.showYear) !== \"undefined\"? props.showYear : \"false\";\r\n    return <>\r\n        {showYear &&\r\n            <input type=\"button\" value=\"<<\" onClick={() => {\r\n                props.subNow(\"Y\")\r\n            }}/>\r\n        }\r\n        <input type=\"button\" value=\"<\" onClick={()=>{\r\n            props.subNow(\"M\")\r\n        }}/>\r\n        <button onClick={props.toggleEl}>{`${day} ${props.month} ${props.year}`}</button>\r\n        <input type=\"button\" value=\">\" onClick={()=>{\r\n            props.addDate(\"M\")\r\n        }}/>\r\n        {showYear &&\r\n            <input type=\"button\" value=\">>\" onClick={() => {\r\n                props.addDate(\"Y\")\r\n            }}/>\r\n        }\r\n\r\n    </>\r\n}\r\n\r\nexport default Selector;","import React from \"react\"\r\nimport css from \"./Calendar.module.css\"\r\nimport moment from \"moment\"\r\n\r\n/**\r\n * Календарь на один месяц, представленный в виде таблицы.\r\n * Компонент практически полностью управляем извне и не имеет представления о текущей дате\r\n * TODO Добавить выходные с локализацией\r\n * @param {Object} props {\r\n *  {string} locale (ru, en, he ...)\r\n *  {number} startMonth Первый день недели для месяца в парадигме javascript (начиная от нуля)\r\n *  {number} endMonth Количество дней в месяце\r\n *  {string} selector\r\n *  {number} selectedDate\r\n *  {function} changeSelectedDate\r\n * }\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction MainTable(props) {\r\n\r\n    moment.locale(props.locale);\r\n    let weekStr = [];\r\n    let weekCorrector = 0;\r\n    let startMonth = props.startMonth;\r\n    let endMonth = props.endMonth;\r\n    let dayNames = [];\r\n    let week = moment.weekdaysShort();\r\n    let dayNum = 0;\r\n\r\n    // Русская корректировка\r\n    if(props.locale === \"ru\") {\r\n        weekCorrector = 1;\r\n        if(startMonth === 0) startMonth = 6;\r\n        else startMonth = startMonth - 1\r\n    }\r\n    // Ивритская корректировка\r\n    let styleDirection = {};\r\n    if(props.locale === \"he\") styleDirection = {direction:\"rtl\"};\r\n\r\n    for(let i = 0;i < 7;i ++){\r\n        weekStr[i] = week[i + weekCorrector];\r\n        if(i === 6 && weekCorrector) weekStr[i] = week[0];\r\n    }\r\n    for(let i = 0;i < 6;i ++){\r\n        dayNames[i] = [];\r\n\r\n        for(let j = 0;j < 7;j ++){\r\n            if(j >= startMonth && dayNum === 0){\r\n                dayNum ++ ;\r\n                dayNames[i][j] = {value:dayNum};\r\n                if(dayNum === props.selectedDate) {\r\n                    dayNames[i].selected = true;\r\n                    dayNames[i][j].selected = true;\r\n                }\r\n                continue;\r\n            }\r\n            if(dayNum > 0 && dayNum < endMonth){\r\n                dayNum ++ ;\r\n                dayNames[i][j] = {value:dayNum};\r\n                if(dayNum === props.selectedDate) {\r\n                    dayNames[i].selected = true;\r\n                    dayNames[i][j].selected = true;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            dayNames[i][j] = {value:\"\"};\r\n        }\r\n    }\r\n\r\n\r\n    return<>\r\n        <table style={styleDirection}>\r\n            <thead>\r\n            <tr>\r\n                {weekStr.map((el,i)=>\r\n                    <th key={i}>{el}</th>\r\n                )}\r\n            </tr>\r\n            </thead>\r\n            <tbody className={props.selector === \"M\" || props.selector === \"Y\"? `${css.selected} ${css.targeted}`: \"\" }>\r\n            {dayNames.map((el,i) =>\r\n                <tr\r\n                    className={`${el.selected? css.selected: \"\"} ${props.selector === \"w\"? css.targeted:\"\"}`}\r\n                    key={i}\r\n                >{\r\n                    el.map((val,j)=>\r\n                        <td\r\n                            className={`${val.selected? css.selected: \"\"} ${props.selector === \"d\"? css.targeted:\"\"}`}\r\n                            onClick={()=>{props.changeSelectedDate(val.value)}}\r\n                            key={j}\r\n                        >{val.value}</td>\r\n                    )\r\n                }</tr>\r\n            )}</tbody>\r\n        </table>\r\n\r\n    </>\r\n}\r\n\r\nexport default MainTable;","import moment from \"moment\"\r\nimport \"moment/locale/ru\"\r\nimport \"moment/locale/he\"\r\nimport React, {useState} from \"react\";\r\nimport css from \"./Calendar.module.css\"\r\nimport Selector from \"./Selector\";\r\nimport MainTable from \"./MainTable\";\r\n\r\n/**\r\n * Календарь - компонент выбора дня - недели - месяца - года, имеющий собственное состояние\r\n * Умеет рпботать с русским форматом\r\n * TODO Сделать компонент управляемым (через state.HomeReducer)\r\n * @param {Object} props {\r\n *  {string} locale\r\n *  {string) label\r\n *  {function} output\r\n * }\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction Calendar(props){\r\n    moment.locale(props.locale);\r\n    // Названия месяцев и дней недели из локализаторов moment\r\n    let monthNames = moment.months();\r\n    // Инициализация текущей даты через хук\r\n    let [now, setNow] = useState(moment());\r\n    function addDate(pos) {\r\n        let newNow = moment(now.add(1,pos));\r\n        setNow(newNow)\r\n    }\r\n\r\n    function subNow(pos) {\r\n        let newNow = moment(now.subtract(1,pos));\r\n        setNow(newNow)\r\n    }\r\n\r\n    function today() {\r\n        let now = moment();\r\n        setNow(moment());\r\n        setSelectedDate(now.date())\r\n    }\r\n\r\n    // Видимость календаря\r\n    let [viewType, setViewType] = useState(false);\r\n    function toggleEl() {\r\n        setViewType(!viewType);\r\n    }\r\n\r\n    // Селектор выбора день/ месяц/ год\r\n    let [selector, setSelector] = useState(\"d\");\r\n    function selectorChange(ev) {\r\n        setSelector(ev.currentTarget.value)\r\n    }\r\n\r\n    // Выбранная дата\r\n    let [selectedDate, setSelectedDate] = useState(moment().date());\r\n    function changeSelectedDate(date) {\r\n        if(date)\r\n        setSelectedDate(date)\r\n    }\r\n\r\n    function output() {\r\n        setViewType(false);\r\n        props.output({year:now.year(),month:now.month(),date:selectedDate,selector:selector})\r\n    }\r\n\r\n    // Задание первого и последнего дней\r\n    let startMonth = now.date(1).day();\r\n    let endMonth = now.daysInMonth();\r\n\r\n    return <div className={css.element}>\r\n        <div className={css.header}>\r\n            <span className={css.label}>{props.label}</span>\r\n            <div style={{display:\"inline-block\"}}>\r\n            <Selector\r\n                showYear={true}\r\n                toggleEl={toggleEl}\r\n                subNow={subNow}\r\n                addDate={addDate}\r\n                month={monthNames[now.month()]}\r\n                year={now.year()}\r\n            />\r\n            {viewType &&\r\n            <div className={css.cal}>\r\n                <MainTable\r\n                    locale={props.locale}\r\n                    startMonth={startMonth}\r\n                    endMonth={endMonth}\r\n                    selector={selector}\r\n                    selectedDate={selectedDate}\r\n                    changeSelectedDate={changeSelectedDate}\r\n                />\r\n\r\n                <div className={css.selector}>\r\n                    <h3>Select</h3>\r\n                    <label><input type=\"radio\" value={\"Y\"} name=\"selector\" onChange={selectorChange} checked={selector === \"Y\"} />Year</label><br/>\r\n                    <label><input type=\"radio\" value={\"M\"} name=\"selector\" onChange={selectorChange} checked={selector === \"M\"} />Month</label><br/>\r\n                    <label><input type=\"radio\" value={\"w\"} name=\"selector\" onChange={selectorChange} checked={selector === \"w\"} />Week</label><br/>\r\n                    <label><input type=\"radio\" value={\"d\"} name=\"selector\" onChange={selectorChange} checked={selector === \"d\"} />Day</label>\r\n                </div>\r\n                <div>\r\n                    <input type=\"button\" value=\"Reset\" onClick={()=>setViewType(false)}/>\r\n                    <input type=\"button\" value=\"Now\" onClick={today}/>\r\n                    <input type=\"button\" value=\"OK\" onClick={output}/>\r\n                </div>\r\n            </div>}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Calendar;","import React, {useState} from \"react\"\r\nimport moment from \"moment\"\r\nimport \"moment/locale/ru\"\r\nimport \"moment/locale/he\"\r\nimport css from \"./Calendar.module.css\"\r\nimport Selector from \"./Selector\";\r\nimport MainTable from \"./MainTable\";\r\n\r\n/**\r\n * Маленький календарь с возможностью выбора только даты\r\n * TODO Cделать компонент управляемым\r\n * @param {Object} props {\r\n *  {string} locale\r\n *  {string) label\r\n *  {function} output\r\n * }\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction SmallCalendar(props) {\r\n    moment.locale(props.locale);\r\n    // Названия месяцев и дней недели из локализаторов moment\r\n    let monthNames = moment.months();\r\n    // Инициализация текущей даты через хук\r\n    let [now, setNow] = useState(moment());\r\n    function addDate(pos) {\r\n        let newNow = moment(now.add(1,pos));\r\n        setNow(newNow)\r\n    }\r\n\r\n    function subNow(pos) {\r\n        let newNow = moment(now.subtract(1,pos));\r\n        setNow(newNow)\r\n    }\r\n\r\n    function today() {\r\n        let now = moment();\r\n        setNow(moment());\r\n        setSelectedDate(now.date())\r\n    }\r\n\r\n    // Видимость календаря\r\n    let [viewType, setViewType] = useState(false);\r\n    function toggleEl() {\r\n        setViewType(!viewType);\r\n    }\r\n    // Выбранная дата\r\n    let [selectedDate, setSelectedDate] = useState(moment().date());\r\n    function changeSelectedDate(date) {\r\n        if(date)\r\n            setSelectedDate(date)\r\n    }\r\n\r\n    function output() {\r\n        setViewType(false);\r\n        let date = moment();\r\n        date.year(now.year());\r\n        date.month(now.month());\r\n        date.date(selectedDate);\r\n        props.output(date.valueOf());\r\n    }\r\n    // Задание первого и последнего дней\r\n    let startMonth = now.date(1).day();\r\n    let endMonth = now.daysInMonth();\r\n\r\n    return <div className={css.element} style={{\"float\":\"none\",marginRight:\"0.3em\"}}>\r\n        <div className={css.header}>\r\n            <span className={css.label}>{props.label}</span>\r\n            <div style={{display:\"inline-block\"}}>\r\n            <Selector\r\n                day={selectedDate}\r\n                showYear={false}\r\n                toggleEl={toggleEl}\r\n                subNow={subNow}\r\n                addDate={addDate}\r\n                month={monthNames[now.month()]}\r\n                year={now.year()}\r\n            />\r\n            {viewType &&\r\n            <div className={css.cal}>\r\n                <MainTable\r\n                    locale={props.locale}\r\n                    startMonth={startMonth}\r\n                    endMonth={endMonth}\r\n                    selector={\"d\"}\r\n                    selectedDate={selectedDate}\r\n                    changeSelectedDate={changeSelectedDate}\r\n                />\r\n                <div>\r\n                    <input type=\"button\" value=\"Reset\" onClick={()=>setViewType(false)}/>\r\n                    <input type=\"button\" value=\"Now\" onClick={today}/>\r\n                    <input type=\"button\" value=\"OK\" onClick={output}/>\r\n                </div>\r\n            </div>}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default SmallCalendar;","import React, {useEffect, useState} from \"react\";\r\nimport css from \"./home.module.css\"\r\nimport Entry from \"./Entry\"\r\nimport Calendar from \"../Calendar/Calendar\";\r\nimport SmallCalendar from \"../Calendar/SmallCalendar\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nfunction Home(props) {\r\n    // Запуск фильтрации для вывода данных. Запускается только один раз\r\n    useEffect(props.activateDataFilter,[]);\r\n\r\n    let [redirect, setRedirect] = useState({go:false,path:\"/account/1\"});\r\n\r\n    function changeField(ev) {\r\n        props.changeTextField(ev.target.value);\r\n    }\r\n\r\n    function preAcceptEl(id) {\r\n        props.preAcceptElement(id);\r\n        setRedirect({go:true,to:\"/account\"})\r\n    }\r\n    function preAcceptSelected() {\r\n\r\n        props.preAcceptSelected();\r\n        setRedirect({go:true,to:\"/account\"})\r\n\r\n    }\r\n\r\n    const entries = props.entries;\r\n\r\n    return(\r\n        <div className={css.home}>\r\n            {redirect.go && <Redirect to={redirect.to}/>}\r\n            <div className={css.dateSelect}>\r\n                <input value={props.textFieldValue} type=\"text\" onChange={changeField} placeholder=\"Name of entry\" />\r\n                <SmallCalendar\r\n                    locale={\"ru\"}\r\n                    label={\"Enter date to activate task\"}\r\n                    output={props.changeActivateTime}\r\n                    value={props.activateTaskTime}\r\n                />\r\n                <input value=\"Add new entry\" type=\"button\" onClick={props.addNewEntry}/>\r\n            </div>\r\n            <div>\r\n                <input value=\"Accept selected\" type=\"button\" onClick={preAcceptSelected}/>\r\n                <input value=\"Delete selected\" type=\"button\" onClick={props.deleteSelected}/>\r\n\r\n                <input\r\n                    value=\"Select all\"\r\n                    type=\"button\"\r\n                    onClick={()=>{props.changeSelectedAll(true)}}/>\r\n\r\n                <input\r\n                    value=\"deselect all\"\r\n                    type=\"button\"\r\n                    onClick={()=>{props.changeSelectedAll(false)}}/>\r\n\r\n                <Calendar\r\n                    locale=\"ru\"\r\n                    label=\"Filter\"\r\n                    value={props.filter}\r\n                    output={props.activateDataFilter}\r\n                />\r\n\r\n                <hr/>\r\n            </div>\r\n            <div>\r\n            {entries.map(el=>\r\n                <Entry\r\n                       key={el.id}\r\n                       name={el.name}\r\n                       id={el.id}\r\n                       accepted={el.accepted}\r\n                       account={el.account}\r\n                       selected={el.selected}\r\n                       toggleElSelect = {props.changeElSelection}\r\n                       accept={preAcceptEl}\r\n                       del={props.deleteEntrie}\r\n                />\r\n            )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","const ADD_NEW_ENTRY = \"ADD_NEW_ENTRY\";\r\nconst CHANGE_ENTER_FIELD = \"CHANGE_ENTER_FIELD\";\r\nconst DELETE = \"DELETE\";\r\nconst CHANGE_SELECTION = \"CHANGE_SELECTION\";\r\nconst CHANGE_SELECTION_ALL = \"CHANGE_SELECTION_ALL\";\r\nconst REFRESH_ALL = \"REFRESH_ALL\";\r\nconst CHANGE_TASK_ACTIVATE_TIME = \"CHANGE_TASK_ACTIVATE_TIME\";\r\nconst CHANGE_FILTER = \"CHANGE_FILTER\";\r\n\r\nconst DEFAULT_STATE = {\r\n    filteredEntries:[],\r\n    newEntryName:\"\",\r\n    activateTaskTime:1568648224761,\r\n    filter:{},\r\n};\r\nfunction HomeReducer(state = DEFAULT_STATE,action) {\r\n\r\n    switch (action.type){\r\n\r\n        case REFRESH_ALL:\r\n            return { ...state,filteredEntries: action.tasks};\r\n        case CHANGE_ENTER_FIELD:\r\n            return { ...state,newEntryName: action.value };\r\n        case CHANGE_TASK_ACTIVATE_TIME:\r\n            return { ...state, activateTaskTime: action.time};\r\n        case CHANGE_FILTER:\r\n            return { ...state, filter:action.filter};\r\n        case ADD_NEW_ENTRY:\r\n            return {\r\n                ...state,\r\n                newEntryName: \"\",\r\n            };\r\n        case DELETE:\r\n            if(action.value){\r\n                let entries = state.filteredEntries.filter((el) => el.id !== action.value);\r\n                return { ...state,filteredEntries:entries}\r\n            } else {\r\n                let entries = state.filteredEntries.filter((el) => !el.selected);\r\n                return { ...state,filteredEntries:entries}\r\n\r\n            }\r\n\r\n        case CHANGE_SELECTION: {\r\n            let entries = state.filteredEntries.map((el) => {\r\n                if (el.id === action.value) el.selected = !el.selected;\r\n                return el;\r\n            });\r\n            return {...state, filteredEntries: entries};\r\n        }\r\n\r\n        case CHANGE_SELECTION_ALL: {\r\n            let entries = state.filteredEntries.map((el) => {\r\n                if(!el.accepted)\r\n                el.selected = action.value;\r\n                return el;\r\n            });\r\n            return {...state, filteredEntries: entries};\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\n// Action creators\r\nconst changeTextField =(value)=>({type:CHANGE_ENTER_FIELD,value: value});\r\nconst changeActivateTime = (time) =>({type:CHANGE_TASK_ACTIVATE_TIME,time:time});\r\nconst addNewEntry = (newTask) => ({type:ADD_NEW_ENTRY,newTask:newTask});\r\nconst deleteEntry = (id) => ({type:DELETE,value:id});\r\nconst changeElSelection = (id) => ({type:CHANGE_SELECTION,value:id});\r\nconst changeSelectedAll = (sign) => ({type:CHANGE_SELECTION_ALL,value:sign});\r\nconst refreshEntries = (tasks) => ({type:REFRESH_ALL,tasks:tasks});\r\nconst changeFilter = (filter) => ({type:CHANGE_FILTER,filter:filter});\r\n\r\nexport {\r\n    changeTextField,\r\n    addNewEntry,\r\n    changeActivateTime,\r\n    deleteEntry,\r\n    changeElSelection,\r\n    changeSelectedAll,\r\n    refreshEntries,\r\n    changeFilter,\r\n}\r\nexport default HomeReducer\r\n","const ADD_TASK = \"ADD_TASK\";\r\nconst DELETE = \"DELETE\";\r\nconst ADD_EMPTY_ACCOUNT = \"ADD_EMPTY_ACCOUNT\";\r\nconst SUBMIT_ACCOUNT = \"SUBMIT_ACCOUNT\";\r\nconst LINK_TASKS_TO_ACCOUNT = \"LINK_TASKS_TO_ACCOUNT\";\r\nconst REFRASH_ALL = \"REFRASH_ALL\";\r\nconst ADD_CATEGORIES = \"ADD_CATEGORIES\";\r\n\r\n\r\nconst DEFAULT_STATE = {\r\n    tasks:[\r\n        {name:\"Торт с марципаном\", id:0, accepted:false, activated:1568581200000},\r\n        {name:\"Укроп\", id:1, accepted:false, activated:1568581200640},\r\n        {name:\"Горчица\", id:2, accepted:false, activated:1568667600000},\r\n        {name:\"Набор юный террорист из супермаркета\", id:3, accepted:false, activated:1568667600500},\r\n        {name:\"Шакшука с кофе\", id:4, accepted:false, activated:1568667600720}\r\n    ],\r\n    accounts:[],\r\n    newAccountId:0,\r\n    nextTaskId: 5,\r\n    categories:{}\r\n};\r\n\r\nfunction TasksAccountsReducer(state = DEFAULT_STATE, action) {\r\n    switch (action.type){\r\n        case ADD_TASK:\r\n            let tasksArr = [...state.tasks,action.newTask];\r\n            return {...state,tasks:tasksArr,nextTaskId:tasksArr.length};\r\n        case DELETE:\r\n            return {...state,tasks:state.tasks.filter((el)=> el.id !== action.id)};\r\n\r\n        case ADD_EMPTY_ACCOUNT:\r\n            /*\r\n                Сложный элемент, требует проверки\r\n            */\r\n\r\n            let accountId = state.accounts.length; // Определяем идентификатор будущего счета -- Возможно потом станет зависимо от бэкенда\r\n            let newAccount = {tasks:action.tasks, id:accountId, accepted:false,time:action.time}; // Создаем объект нового счета со ссылками на таски\r\n\r\n            return {\r\n                ...state,\r\n                accounts:[ ...state.accounts,newAccount],\r\n                newAccountId: accountId\r\n            }; // Композиция всех данных - счетов и тасков\r\n\r\n        case LINK_TASKS_TO_ACCOUNT:\r\n            let newTasksData = state.tasks.map((el)=>{ // Вносим ссылку в таски\r\n                if(action.tasks.some((num)=>num === el.id)){ // Проверяем, входит ли таск в число выбранных\r\n                    el.account = action.accountId; //заносим идентификатор\r\n                    el.accepted = true      // Устанавливаем статус accepted\r\n\r\n                }\r\n                return el;\r\n            });\r\n            return { ...state,tasks: newTasksData};\r\n\r\n        case SUBMIT_ACCOUNT:\r\n            let result = { ...state,accounts:[ ...state.accounts]};\r\n            result.accounts[action.id] = {\r\n                ...result.accounts[action.id],\r\n                ...action.content,\r\n                accepted:true};\r\n            return result;\r\n\r\n        case REFRASH_ALL:\r\n            return {\r\n                ...state,\r\n                tasks:action.data.tasks,\r\n                accounts:action.data.accounts,\r\n                newTaskId:action.data.newTaskId,\r\n                newAccountId:action.data.newAccountId,\r\n                categories:action.data.categories\r\n            };\r\n\r\n        case ADD_CATEGORIES:\r\n\r\n            let categories = state.categories;\r\n            const price = action.names.length === 1? action.price : null;\r\n            const insertedObj = {price:price,time:Date.now(),id: action.id};\r\n\r\n            action.names.forEach(el=>{\r\n                if(categories[el] === undefined) categories[el] = [];\r\n                categories[el].push(insertedObj);\r\n            });\r\n\r\n            return { ...state,categories:categories };\r\n        default: return state;\r\n    }\r\n}\r\n\r\n// actions\r\nconst addNewTask = (newTask) => ({\r\n    type: ADD_TASK,\r\n    newTask:newTask\r\n});\r\n\r\nconst delTask = (id) => ({\r\n    type:DELETE,\r\n    id:id\r\n});\r\n\r\n/**\r\n * Создание нового счета с привязкой к таскам\r\n * @param {Array} tasks Перечень идентификаторов тасков\r\n * @param time\r\n * @returns {{type: string, tasks: *}}\r\n */\r\nconst addNewAccount = (tasks,time) => ({type:ADD_EMPTY_ACCOUNT,tasks:tasks,time:time});\r\n\r\n/**\r\n * Внесение в таски ссылок на аккаунт\r\n * @param accountId Идентификатор счета\r\n * @param {Array} tasks Массив идентификаторов тасков\r\n * @returns {{type: string, accountId: *, tasks: *}}\r\n */\r\nconst linkTasks = (accountId,tasks) =>({type:LINK_TASKS_TO_ACCOUNT,accountId:accountId,tasks:tasks});\r\n/**\r\n * Внесение в счет данных\r\n * @param {Number} id Идентификатор аккаунта\r\n * @param {Object} data Набор параметров счета\r\n * @returns {{type: string, id: *, content: *}}\r\n * @constructor\r\n */\r\nconst SubmitAccount = (id, data) =>({type: SUBMIT_ACCOUNT,id:id,content:data});\r\n\r\nconst Refresh = (data) =>({type: REFRASH_ALL,data:data});\r\n\r\n/**\r\n * Добавление информации о покупке товара определенной категории\r\n * @param {array} names\r\n * @param {number} price\r\n * @param {number} id\r\n * @returns {{type: string, names: *, price: *,id: number}}\r\n * @constructor\r\n */\r\nconst AddCategories = (names,price,id) => ({type: ADD_CATEGORIES,names:names,price:price,id:id});\r\n\r\nexport {\r\n    addNewTask,\r\n    delTask,\r\n    addNewAccount,\r\n    linkTasks,\r\n    SubmitAccount,\r\n    Refresh,\r\n    AddCategories\r\n}\r\nexport default TasksAccountsReducer;","import * as HomeReducer from \"./HomeReducer\"\r\nimport * as TasksCcountsReducer from \"./TasksAccountsReducer\"\r\nimport moment from \"moment\";\r\n/**\r\n * Этот фацйл содержит функции, манипулирующие данными store\r\n * - Создание ногого таска и его запись в две ветки store.\r\n * - Фильтрация тасков по времени и закидывание в HomeReducer\r\n * - Удаление ненужного таска из обеих веток\r\n **/\r\n\r\n/**\r\n * Добавление новой таски. Создает объект и вносит его в хранилище.\r\n * @returns {Function}\r\n */\r\nfunction addTask() {\r\n    return (dispatch, getState) =>{\r\n        let state = getState();\r\n        let activateTaskTime = state.HomeReducer.activateTaskTime;\r\n        let nextTaskId = state.TasksAccountsReducer.tasks.length;\r\n        let newEntryName = state.HomeReducer.newEntryName;\r\n        let newTask = {\r\n            name:newEntryName,\r\n            id:nextTaskId,\r\n            accepted:false,\r\n            activateTaskTime: activateTaskTime\r\n        };\r\n        dispatch(TasksCcountsReducer.addNewTask(newTask));\r\n        dispatch(HomeReducer.addNewEntry());\r\n        dispatch(tasksFilter());\r\n    }\r\n}\r\n\r\n// Обработка данных от компонента Calendar\r\nfunction CalendarCallback(conditions){\r\n    if(typeof conditions ===  \"undefined\") {\r\n        let now = moment();\r\n        conditions = {\r\n            year: now.year(),\r\n            month: now.month(),\r\n            date: now.date(),\r\n            selector: \"M\"\r\n        };\r\n    }\r\n    let filterTime = moment({\r\n        year:conditions.year,\r\n        month:conditions.month,\r\n        date:conditions.date\r\n    });\r\n\r\n    return [conditions,filterTime]\r\n}\r\n\r\n// Фильтрация данных, выводимых пользователю\r\nfunction tasksFilter(params){\r\n    const [conditions,filterTime] = CalendarCallback(params);\r\n    return (dispatch, getState) =>{\r\n        let insertedData = getState().TasksAccountsReducer.tasks;\r\n\r\n        insertedData = insertedData.filter(el =>{\r\n            let time = moment(el.activated);\r\n            return time.isSame(filterTime,conditions.selector)\r\n        });\r\n\r\n        insertedData = insertedData.map((el) => ({...el,selected:false}));\r\n\r\n        dispatch(HomeReducer.refreshEntries(insertedData));\r\n        dispatch(HomeReducer.changeFilter(conditions));\r\n    }\r\n}\r\n\r\n/**\r\n * Синхронное удаление данных из хранилища и внешнего вида\r\n * @param id?\r\n * @returns {Function}\r\n */\r\nfunction delTask(id) {\r\n    return (dispatch, getState) =>{\r\n        function delForId(id) {\r\n            dispatch(HomeReducer.deleteEntry(id));\r\n            dispatch(TasksCcountsReducer.delTask(id));\r\n        }\r\n\r\n        if(id && typeof(id) === \"number\") delForId(id);\r\n        else {\r\n            getState().HomeReducer.filteredEntries.forEach((el)=>{\r\n                if(el.selected)delForId(el.id);\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nfunction preAcceptElement(id) {\r\n    return (dispatch)=>{\r\n        dispatch(TasksCcountsReducer.addNewAccount([id],Date.now()));\r\n    }\r\n}\r\n\r\nfunction preAcceptSelected() {\r\n    return (dispatch, getState)=>{\r\n        let entries = getState().HomeReducer.filteredEntries;\r\n        let selected = entries.filter((el)=> el.selected).map(el=>el.id);\r\n        dispatch(TasksCcountsReducer.addNewAccount(selected,Date.now()));\r\n    }\r\n}\r\n\r\n/**\r\n * Принятие счета\r\n * @param id Идентификатор счета\r\n * @param {Object} values Набор параметров, полученных при заполнении формы\r\n * @param {Array} names Набор наименований, изначально переданных в форму\r\n * @param {Array} ids Набор идентификаторов тасков, выбранных для создания счета\r\n */\r\nfunction accept(id, values, names, ids) {\r\n    //\r\n    return (dispatch,getState) =>{\r\n        let state = getState().TasksAccountsReducer;\r\n\r\n        let account = {tasks:[]};\r\n        let newTask = {name:[],id:state.nextTaskId,account: state.newAccountId,activated:Date.now(),accepted: true};\r\n        let isNewTask = false;\r\n\r\n        for(let i = 0; i < values.names.length;i ++){\r\n            if(values.names[i] === names[i])\r\n                account.tasks.push(ids[i]);\r\n            else if(values.names[i] !== \"\"){\r\n                isNewTask = true;\r\n                account.tasks.push(state.nextTaskId);\r\n                newTask.name.push(values.names[i])\r\n            }\r\n        }\r\n        account.price = values.price;\r\n\r\n        if(isNewTask){\r\n            newTask.name = newTask.name.join(\", \");\r\n            dispatch(TasksCcountsReducer.addNewTask(newTask))\r\n        }\r\n\r\n        dispatch(TasksCcountsReducer.linkTasks(id,ids));\r\n        dispatch(TasksCcountsReducer.SubmitAccount(id,account))\r\n        // -- /\r\n    }\r\n}\r\n\r\nexport default {\r\n    addTask,\r\n    tasksFilter,\r\n    delTask,\r\n    accept,\r\n    preAcceptElement: preAcceptElement,\r\n    preAcceptSelected: preAcceptSelected\r\n}","import Home from \"./Home\"\r\nimport {connect} from \"react-redux\";\r\nimport * as importedData from \"../../redux/HomeReducer\"\r\nimport actor from \"../../redux/actor\"\r\n/*\r\n* Контейнер для передачи State в Home\r\n* */\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        entries: state.HomeReducer.filteredEntries,\r\n        textFieldValue: state.HomeReducer.newEntryName,\r\n        filter:state.HomeReducer.filter,\r\n        activateTaskTime:state.HomeReducer.activateTaskTime,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    changeTextField:importedData.changeTextField,\r\n    addNewEntry:actor.addTask,\r\n    activateDataFilter:actor.tasksFilter,\r\n    preAcceptElement:actor.preAcceptElement,\r\n    preAcceptSelected:actor.preAcceptSelected,\r\n    deleteEntrie:actor.delTask,\r\n    deleteSelected:actor.delTask,\r\n    changeElSelection:importedData.changeElSelection,\r\n    changeSelectedAll:importedData.changeSelectedAll,\r\n    changeActivateTime:importedData.changeActivateTime,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\r\n\r\n","import {createSelector} from \"reselect\"\r\nimport moment from \"moment\"\r\n\r\nfunction CalendarCallback(conditions){\r\n    if( typeof conditions ===  \"undefined\" || typeof conditions.selector ===  \"undefined\") {\r\n        let now = moment();\r\n        conditions = {\r\n            year: now.year(),\r\n            month: now.month(),\r\n            date: now.date(),\r\n            selector: \"M\"\r\n        };\r\n    }\r\n    let filterTime = moment({\r\n        year:conditions.year,\r\n        month:conditions.month,\r\n        date:conditions.date\r\n    });\r\n\r\n    return [filterTime,conditions.selector]\r\n}\r\n\r\n/**\r\n * Расчет количества периодов (дней, недель, месяцев или лет в заданном массиве счетов)\r\n * @param accounts\r\n * @param period\r\n * @returns {number}\r\n */\r\nfunction countTimePeriodsInAccounts(accounts, period) {\r\n    let counter = 0;\r\n    let time = moment(0);\r\n    accounts.forEach((el)=>{\r\n        let now = moment(el.time);\r\n        if(!now.isSame(time,period)){\r\n            counter ++;\r\n            time = now;\r\n        }\r\n    });\r\n    return counter;\r\n}\r\n\r\n/**\r\n * Расчет среднех расходов за период\r\n * @param accounts\r\n * @param period\r\n * @returns {number}\r\n * @constructor\r\n */\r\nfunction AVGOfPeriod(accounts, period) {\r\n    let avgRes = 0;\r\n    let periods = countTimePeriodsInAccounts(accounts,period);\r\n    accounts.forEach((el)=>{\r\n        avgRes += Number(el.price);\r\n    });\r\n    let res = avgRes / periods;\r\n    return !isNaN(res)? res : \"-\"\r\n}\r\n\r\n/**\r\n * Среднее количество счетов за период\r\n * @param accounts\r\n * @param period\r\n * @returns {number}\r\n * @constructor\r\n */\r\nfunction AVGAccountsOfPeriod(accounts, period) {\r\n    let periods = countTimePeriodsInAccounts(accounts,period);\r\n    let res = accounts.length / periods;\r\n    return !isNaN(res) ? res :  \"-\"\r\n}\r\n\r\nexport const getAccounts = (state) => state.TasksAccountsReducer.accounts;\r\n\r\nexport const getTimeFilterFromInfo = (state) => state.HelpReducer.InfoTime;\r\n\r\n/*\r\nСелектор фильтрации счетов, выбранных по времени с помощью getTimeFilterFromInfo\r\n */\r\nexport const FilteredAccounts = createSelector([getAccounts,getTimeFilterFromInfo],(accounts,filter) =>{\r\n    let [currentTimeFilter,conditions] = CalendarCallback(filter);\r\n    return accounts.filter((el)=>moment(el.time).isSame(currentTimeFilter,conditions));\r\n});\r\n\r\n/*\r\nСуммарная стоимость отфильтрованных данных\r\n */\r\nexport const CurrentSum = createSelector(FilteredAccounts,(accounts)=>{\r\n    return accounts.reduce((sum,el) => {\r\n        let price = el.price !== undefined ? el.price:0;\r\n        return sum + Number(price);\r\n    },0)\r\n});\r\n\r\n\r\n\r\nexport const CountAccountsFromFiltered = createSelector(FilteredAccounts,(accounts)=>accounts.length);\r\n\r\nexport const CountTasksOfSelected = createSelector(FilteredAccounts,(accounts)=>\r\n    accounts.reduce((tasks,el)=>el.tasks.length + tasks,0));\r\n\r\n\r\nexport const AVGDay = createSelector([getAccounts],(accounts)=>AVGOfPeriod(accounts,\"d\"));\r\nexport const AVWeek = createSelector([getAccounts],(accounts)=>AVGOfPeriod(accounts,\"W\"));\r\nexport const AVGMonth = createSelector([getAccounts], (accounts)=>AVGOfPeriod(accounts,\"M\"));\r\nexport const AVGYear = createSelector([getAccounts], (accounts)=>AVGOfPeriod(accounts,\"Y\"));\r\nexport const getAVGAccountsOfDay = createSelector([getAccounts],(accounts)=>AVGAccountsOfPeriod(accounts,\"d\"));\r\nexport const getAVGAccountsOfWeek = createSelector([getAccounts],(accounts)=>AVGAccountsOfPeriod(accounts,\"W\"));\r\nexport const getAVGAccountsOfMonth = createSelector([getAccounts],(accounts)=>AVGAccountsOfPeriod(accounts,\"M\"));\r\nexport const getAVGAccountsOfYear = createSelector([getAccounts],(accounts)=>AVGAccountsOfPeriod(accounts,\"Y\"));\r\n\r\n\r\n\r\n\r\n/*\r\nCategories\r\n */\r\n\r\n/**\r\n * Фильтрация набора данных одной категории по интервалу времени\r\n * @param category\r\n * @param startTime\r\n * @param endTime\r\n * @returns {{}}\r\n */\r\n// function filterCategoryOfTimeBeetwin(category,startTime,endTime) {\r\n//     return {};\r\n// }\r\n\r\n/**\r\n * Фильтрация набора данных одной категории на заданный день, неделю, месяц, год\r\n * @param category\r\n * @param time\r\n * @param selector\r\n * @returns {{}}\r\n */\r\n// function filterCategoryOfTimeOn(category, time, selector = \"M\") {\r\n//     return {}\r\n// }\r\n\r\n/**\r\n * Подсчет средней стоимости категории\r\n * @param category\r\n * @returns {number}\r\n */\r\nfunction getCategoryAvg(category) {\r\n    const count = category.length;\r\n    const [sum,ignored] = category.reduce(                    // Суммирование значений. ignored\r\n        (res, el)=> {                                         // нужен для устранения влияния непроставленных цен на результат\r\n            res[0] += !!el.price? +el.price : 0 ;             // Дело в том, что при расчете можно учесть лишь те счета, в которых\r\n            res[1] += !!el.price? 0: 1;                       // исследуемый товар - единственный\r\n\r\n            return [res[0],res[1]]\r\n        }\r\n        ,[0,0]);\r\n    const result = sum/(count - ignored);\r\n    return !isNaN(result)? result : 0;\r\n}\r\n\r\n/**\r\n * Получение среднего интервала времени между двумя покупками\r\n * @param category\r\n * @returns {number}\r\n */\r\nfunction getCategoryAVGTime(category) {\r\n    let intervals = [];\r\n    for(let i = 0;i < category.length;i ++){\r\n        if(i === 0) continue;\r\n        intervals.push(category[i].time - category[i-1].time)\r\n    }\r\n\r\n    let sum = intervals.reduce((memo,el)=>memo + el,0);\r\n\r\n    let res = sum/intervals.length;\r\n    return !isNaN(res)? res : 0;\r\n}\r\n\r\n/**\r\n * Вывод подготовленного объекта категорий без фильтрации\r\n * @param categories\r\n */\r\nfunction getCategoriesWithAVG(categories) {\r\n    let names = Object.keys(categories);\r\n    let values = Object.values(categories);\r\n\r\n    return values.map((el,i)=>{\r\n        const avg = getCategoryAvg(el);\r\n        const avgTime = getCategoryAVGTime(el);\r\n        return {name:names[i],avg:avg,avgTime:avgTime};\r\n    })\r\n}\r\n\r\nexport const getCategories = (state) => state.TasksAccountsReducer.categories;\r\nexport const getUnfilteredCategories = createSelector([getCategories],getCategoriesWithAVG);\r\n\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUnfilteredCategories} from \"../../redux/selectors\"\r\nimport css from \"./Categories.module.css\"\r\n\r\nfunction Categories(props) {\r\n    const avgTimeFmt = (time) => Math.floor(time / 1000/ 60/ 60/ 24);\r\n    return(<div className={css.categories}>\r\n        Categories\r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Cost AVG</th>\r\n                <th>Interval</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {props.categories.map(\r\n                (el,i)=> <Row\r\n                    name={el.name}\r\n                    avg={el.avg}\r\n                    avgTime={avgTimeFmt(el.avgTime)}\r\n                    key={i} />)}\r\n            </tbody>\r\n        </table>\r\n    </div>)\r\n}\r\n\r\nfunction Row(props) {\r\n    return(<>\r\n        <tr>\r\n            <td>{props.name}</td>\r\n            <td>{props.avg}</td>\r\n            <td>{props.avgTime}</td>\r\n        </tr>\r\n    </>)\r\n}\r\n\r\nexport default connect(\r\n    state=>(\r\n        { categories:getUnfilteredCategories(state) }),{}\r\n)(Categories)","import React from \"react\";\r\nimport css from \"./info.module.css\"\r\nimport Calendar from \"../Calendar/Calendar\"\r\n\r\n\r\n/**\r\n * Вывод информации о затратах на выбранный месяц, день, неделю, год, а также средних за день, неделю или месяц\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction Info(props) {\r\n    return <div className={css.info}>Info\r\n        <table className={css.infoTb}>\r\n            <caption className={css.infoTb}>\r\n                <span className={css.infoTb}>Data of expenses</span>\r\n                <Calendar\r\n                    locale=\"ru\"\r\n                    output={props.setTime}\r\n                />\r\n            </caption>\r\n            <tbody className={css.infoTb}>\r\n            <tr className={css.infoTb}>\r\n                <td className={css.infoTb}>Current time expenses</td>\r\n                <td className={css.infoTb}>{props.CurrentSum}</td>\r\n                <td className={css.infoTb}>Accounts: {props.CountAccountsFromFiltered}</td>\r\n                <td className={css.infoTb}>Tasks: {props.CountTasksOfSelected}</td>\r\n                </tr>\r\n            <tr className={css.infoTb}><td className={css.infoTb}>Average day expenses</td>\r\n                <td className={css.infoTb}>{props.AVGDay}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            <tr className={css.infoTb}><td className={css.infoTb}>Average accounts of day</td>\r\n                <td className={css.infoTb}>{props.getAVGAccountsOfDay}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            <tr className={css.infoTb}>\r\n                <td className={css.infoTb}>Average week expenses</td>\r\n                <td className={css.infoTb}>{props.AVWeek}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            <tr className={css.infoTb}><td className={css.infoTb}>Average accounts of week</td>\r\n                <td className={css.infoTb}>{props.getAVGAccountsOfWeek}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            <tr className={css.infoTb}>\r\n                <td className={css.infoTb}>Average month expenses</td>\r\n                <td className={css.infoTb}>{props.AVGMonth}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            <tr className={css.infoTb}>\r\n                <td className={css.infoTb}>Average accounts of month</td>\r\n                <td className={css.infoTb}>{props.getAVGAccountsOfMonth}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            <tr className={css.infoTb}>\r\n                <td className={css.infoTb}>Average year expenses</td>\r\n                <td className={css.infoTb}>{props.AVGYear}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            <tr className={css.infoTb}>\r\n                <td className={css.infoTb}>Average accounts of year</td>\r\n                <td className={css.infoTb}>{props.getAVGAccountsOfYear}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n}\r\n\r\nexport default Info;\r\n","/*\r\n#Вспомогательная ветвь state, хранящая данные об элементах интерфейса, не работающих через redux-form\r\n- Календарь для фильтрации времени из Info\r\n */\r\nconst INFO_SET_TIME = \"INFO_SET_TIME\";\r\n\r\nconst DEFAULT_STATE = {\r\n    InfoTime:{}\r\n};\r\n\r\nexport default function HelpReducer(state = DEFAULT_STATE, action){\r\n    switch (action.type){\r\n        case INFO_SET_TIME:\r\n            return {...state,InfoTime:action.time};\r\n        default: return state;\r\n    }\r\n}\r\n\r\nconst setInfoTime = (time) =>({type:INFO_SET_TIME,time:time});\r\n\r\nexport {\r\n    setInfoTime\r\n}","import Info from \"./Info\"\r\nimport {connect} from \"react-redux\"\r\nimport * as selectors from \"../../redux/selectors\"\r\n\r\nimport * as HelpReducer from \"../../redux/HelpReducer\"\r\n\r\nconst mapStateToProps = (state) => ({\r\n    FilteredAccounts:selectors.FilteredAccounts(state), // Only for example\r\n    CurrentSum:selectors.CurrentSum(state),\r\n    CountAccountsFromFiltered: selectors.CountAccountsFromFiltered(state),\r\n    CountTasksOfSelected: selectors.CountTasksOfSelected(state),\r\n    AVGDay: selectors.AVGDay(state),\r\n    AVWeek: selectors.AVWeek(state),\r\n    AVGMonth: selectors.AVGMonth(state),\r\n    AVGYear: selectors.AVGYear(state),\r\n    getAVGAccountsOfDay: selectors.getAVGAccountsOfDay(state),\r\n    getAVGAccountsOfWeek: selectors.getAVGAccountsOfWeek(state),\r\n    getAVGAccountsOfMonth: selectors.getAVGAccountsOfMonth(state),\r\n    getAVGAccountsOfYear: selectors.getAVGAccountsOfYear(state),\r\n});\r\nconst mapDispatchToProps = {\r\n    setTime:HelpReducer.setInfoTime\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Info);\r\n","import React from \"react\";\r\n\r\nfunction Help(props) {\r\n    return(<div>Help</div>)\r\n}\r\n\r\nexport default Help","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport HomeReducer from \"./HomeReducer\"\r\nimport TasksAccountsReducer from \"./TasksAccountsReducer\"\r\nimport thunk from \"redux-thunk\"\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport {save,load} from \"redux-localstorage-simple\"\r\nimport HelpReducer from \"./HelpReducer\";\r\n\r\n/*\r\n Хранилище записывается в localstorage с помощью redux-localstorage-simple.\r\n Это решение имеет недостаток - все пишется в одну строку - json операции и синхронное сохранение вылезут на больших объемах\r\n */\r\nlet reducers = combineReducers({HomeReducer,TasksAccountsReducer, HelpReducer,form:formReducer});\r\nlet store = createStore(reducers,load({ states:[\"TasksAccountsReducer\"]}),applyMiddleware(thunk,save({ states:[\"TasksAccountsReducer\"]})));\r\nexport default store;","// Контекст из Реакта. Предназначен для передачи параметров элементам внутри формы\r\nimport {createContext} from \"react\"\r\nconst FormData = createContext({});\r\nexport default FormData\r\n","import React from \"react\"\r\nimport FormData from \"./FormData\"\r\nimport css from \"./account.module.css\"\r\n\r\n/**\r\n * Элемент формы input с выводом ошибки\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nexport function Input(props) {\r\n    return <FormData.Consumer>\r\n        {\r\n            context => <><input\r\n                {...props.input}\r\n                placeholder={props.label}\r\n                type={props.type}\r\n                disabled={context.disabled || props.disabled}\r\n                onChange={(e) => {\r\n                    props.input.onChange(e)\r\n                }}\r\n            />\r\n                {props.meta.touched &&\r\n                ((props.meta.error && <span className={css.error}>{props.meta.error}</span>) ||\r\n                    (props.meta.warning && <span className={css.warning}>{props.meta.warning}</span>))}\r\n            </>\r\n        }\r\n    </FormData.Consumer>\r\n}\r\n\r\n/**\r\n * Простой инпут без интеграции с redux form.\r\n * Предназначен для задания дополни тельных параметров кнопкам\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nexport function SimpleInput(props) {\r\n    return (\r\n    <FormData.Consumer>\r\n        {(context) => <input\r\n            { ...props}\r\n            disabled={context.disabled || props.disabled}\r\n        /> }\r\n    </FormData.Consumer>)\r\n}","import React, {useEffect,useState} from \"react\";\r\nimport { Field, FieldArray, Form, initialize, reduxForm} from \"redux-form\";\r\nimport css from \"./account.module.css\"\r\nimport store from \"../../redux/mystore\";\r\nimport {Provider} from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\nimport {Input, SimpleInput} from \"./elements\"\r\nimport FormData from \"./FormData\"\r\nimport validate from \"./validate\"\r\n\r\n/**\r\n * Вывод списка наименований через FieldsArray\r\n * @param props\r\n * @returns {*}\r\n */\r\nfunction NamesList(props) {\r\n\r\n    let [lockBtn,setLockBtn] = useState(false);\r\n    useEffect(()=>{\r\n        if(props.fields.length === 1) setLockBtn(true);\r\n        else if(props.fields.length > 1) setLockBtn(false);\r\n    },[props.fields.length]);\r\n\r\n    function pushEmptyElement(e, index) {\r\n        if (e.target.value && index === (props.fields.length - 1)) props.fields.push(\"\")\r\n    }\r\n\r\n    function removeElement(index) {\r\n        if (props.fields.length > 1) props.fields.remove(index)\r\n    }\r\n\r\n\r\n    return <div>\r\n        {props.fields.map((el, index) =>\r\n            <div key={index}>\r\n                <Field component={Input} name={el} onChange={e => pushEmptyElement(e, index)}/>\r\n                <SimpleInput type=\"button\" disabled={lockBtn} value=\"X\" onClick={() => removeElement(index)}/>\r\n            </div>)\r\n        }\r\n        {props.meta.error && <div className={css.error}>{props.meta.error}</div>}\r\n    </div>\r\n}\r\n\r\n/**\r\n * Таблица дополнительных параметров\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction Params(props) {\r\n\r\n    let [lockBtn,setLockBtn] = useState(false);\r\n    useEffect(()=>{\r\n        if(props.fields.length === 1) setLockBtn(true);\r\n        else if(props.fields.length > 1) setLockBtn(false);\r\n    },[props.fields.length]);\r\n\r\n    function removeElement(index) {\r\n        if (props.fields.length > 1) props.fields.remove(index)\r\n    }\r\n\r\n    function pushEmptyElement(e, index) {\r\n        if (e.target.value && index === (props.fields.length - 1)) props.fields.push([\"\", \"\"])\r\n    }\r\n\r\n\r\n\r\n    return <table>\r\n        <tbody>\r\n        {props.fields.map((el, index) => <tr key={index}>\r\n                <FieldArray onChange={(e) => {\r\n                    pushEmptyElement(e, index)\r\n                }} component={Param} name={el}/>\r\n                <td><SimpleInput disabled={lockBtn} type={\"button\"} value={\"X\"} onClick={() => {\r\n                    removeElement(index)\r\n                }}/></td>\r\n            </tr>\r\n        )}\r\n        </tbody>\r\n    </table>\r\n}\r\n\r\nfunction Param(props) {\r\n\r\n    let out = props.fields.map((el, index) => <td key={index}><Field onChange={(e) => props.onChange(e)}\r\n                                                                     component={Input} name={el}/></td>);\r\n    return <>{out}</>\r\n}\r\n\r\n/**\r\n * Форма счета.\r\n * ##Пункты:\r\n * - Список наименований с возможностью удаления и добавления\r\n * - Общая цена\r\n * - Дата активации и дата акцепта (только чтение)\r\n * - Таблица дополнительнеых параметров типа ключ - значение\r\n * - Кнопки принять, отменить\r\n * Сообщения могут быть выданы синхронной валидацией.\r\n * Блокировка клавиш и полей через селекторы redux-form и возможно action creaters\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction AccountForm(props) {\r\n    let {handleSubmit} = props;\r\n\r\n    return <Form onSubmit={handleSubmit}>\r\n            <div>\r\n                <h3>List of names:</h3>\r\n                <FieldArray component={NamesList} name={\"names\"}/>\r\n            </div>\r\n            <div>\r\n                <h3>Price:</h3>\r\n                <Field component={Input} name={\"price\"}/>\r\n            </div>\r\n            <div>\r\n                <h3>Parameters</h3>\r\n                <FieldArray component={Params} name={\"params\"}/>\r\n            </div>\r\n            <SimpleInput disabled={!props.valid} type={\"submit\"}/>\r\n            <input type={\"button\"} value={\"exit\"} onClick={props.exit}/>\r\n    </Form>\r\n}\r\n\r\n// HOC AccountReduxForm Он необходим для корректной работы ReduxForm\r\nconst Formed = reduxForm({form: \"account\", initialValues: {name: \"1234\"}, validate})(AccountForm);\r\nlet AccountReduxForm = (props) => <Provider store={store}><Formed { ...props} /></Provider>;\r\n\r\n/**\r\n * Компонент страницы, на которой выводится форма и заносятся ее данные.\r\n * TODO Преобразовать в классовый\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction Account(props) {\r\n    let isAccepted = props.match.params.id !== undefined;\r\n    let id = props.match.params.id !== undefined ? props.match.params.id : props.currentAccountId;\r\n    let account = props.accounts[id];\r\n    let timeData = \"\",timeString = \"\";\r\n    /*\r\n        Подготовка массива names - списка покупок в том числе из наборов, перечисленных через запятую вида\r\n        Макароны, яйца, помидоры, майонез\r\n        TODO Зарефакторить этоу логику и перенести в бизнес.\r\n     */\r\n    let names = [], ids = [], rawNames = [];\r\n    // Эта ошибка возникает при перезагрузке страницы. Идут неверные параметры\r\n    // Решение - редирект\r\n    try {\r\n        rawNames = account.tasks.map((el) => ({name: props.tasks[el].name, id: props.tasks[el].id}));\r\n        timeData = moment(account.time).format(\"YYYY-MM-DD\");\r\n        timeString = moment(account.time).format(\"DD.MM.YY\");\r\n    } catch (err) {\r\n        props.history.push(\"/\")\r\n    }\r\n    for (let i = 0; i < rawNames.length; i++) {\r\n        rawNames[i].name.split(\",\").forEach(el => {\r\n            names.push(el);\r\n            ids.push(rawNames[i].id)\r\n        })\r\n    }\r\n\r\n    //Чистка names\r\n    names = names.map(el=>el.toLowerCase().trim());\r\n\r\n\r\n    /**\r\n     * Формирует объект для запуска actionCreater Accept\r\n     * Этот объект содержит обновленный набор names вида [Идентификатор элемента tasks, Идентификатор элемента tasks ...]\r\n     * и прочие параметры\r\n     * @param values\r\n     */\r\n    function accept(values){\r\n\r\n        props.accept(id,values,names,ids);\r\n        props.addCategories(names,values.price,id);\r\n        props.history.push(\"/\")\r\n\r\n        // names - важный бизнес объект. Его задача - хранение наименований Здесь они диспатчатся в Categorys\r\n    }\r\n\r\n    // Инициализация данных формы ввода при создании\r\n    useEffect(() => {\r\n        store.dispatch(initialize(\"account\", {names: [...names, \"\"],price:account.price, params: [[\"NN\", \"221\"], [\"\", \"\"]]}))\r\n    }, [names]);\r\n\r\n    return <div className={css.account}>\r\n        <h2>Account №: {id}</h2>\r\n        <time dateTime={timeData}>{timeString}</time>\r\n        <FormData.Provider value={{disabled:isAccepted}}>\r\n            <AccountReduxForm\r\n                onSubmit={accept}\r\n                exit={()=>{props.history.push(\"/\")}}  // Возврат на верхний уровень без сохранения\r\n            />\r\n        </FormData.Provider>\r\n    </div>\r\n}\r\n\r\nexport default Account;","\r\nexport default function validate(value) {\r\n    let errors = {};\r\n    if(isNaN(Number(value.price))){\r\n        errors.price = \"Must be number\";\r\n        errors._error = \"Isn`t correct price!\"\r\n    }\r\n    if(value.names&&!value.names.some(el=>el!==\"\")){\r\n        errors.names = {_error:\"At least one name must be imputed\"};\r\n        errors._error = \"Name is uncorrected\"\r\n    }\r\n    return errors;\r\n}","import Account from \"./Account\"\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport actor from \"../../redux/actor\";\r\nimport {AddCategories} from \"../../redux/TasksAccountsReducer\"\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        tasks: state.TasksAccountsReducer.tasks,\r\n        accounts: state.TasksAccountsReducer.accounts,\r\n        currentAccountId: state.TasksAccountsReducer.newAccountId,\r\n        newTaskId:state.TasksAccountsReducer.nextTaskId,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    accept: actor.accept,\r\n    addCategories:AddCategories\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(Account));","import {connect} from \"react-redux\"\r\nimport React, {useState} from \"react\";\r\nimport {load} from \"redux-localstorage-simple\"\r\nimport css from \"./Data.module.css\"\r\nimport {Refresh} from \"../../redux/TasksAccountsReducer\"\r\nfunction Data(props) {\r\n\r\n    let [jsonDump,setJsonDump] = useState(\r\n        JSON.stringify(\r\n            load({ states:[\"TasksAccountsReducer\"]}),\r\n            2, 2)\r\n    );\r\n\r\n    function changeDump(e){\r\n        setJsonDump(e.target.value)\r\n    }\r\n\r\n    function clearStored() {\r\n        localStorage.clear();\r\n        window.location.reload()\r\n    }\r\n\r\n    function save(){\r\n        let dataObj = {};\r\n        try{\r\n            dataObj = JSON.parse(jsonDump);\r\n        }catch (e) {\r\n            alert(\"Data is uncorrect\");\r\n            return;\r\n        }\r\n\r\n        props.refresh(dataObj.TasksAccountsReducer);\r\n        alert(\"Data is saved\")\r\n    }\r\n    return (<div className={css.data}>\r\n        <div>\r\n            It is the stored application information. You can copy it and move to enouther device\r\n            or clear it.<br/>\r\n\r\n        </div>\r\n        <div className={css.warn}><b>Warning!</b> Change data here may be danger.</div>\r\n        <div>\r\n            <textarea cols={60} rows={30} value={jsonDump} onChange={changeDump}/>\r\n        </div>\r\n        <div>\r\n            <input type={\"button\"} value={\"clear\"} onClick={clearStored}/>\r\n            <input type={\"button\"} value={\"save\"} onClick={save}/>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default connect(null,{refresh:Refresh})(Data);","import React from 'react';\r\nimport Header from './components/Header'\r\nimport HomeWraper from './components/home/HomeWraper'\r\nimport Categories from \"./components/categories/Categories\";\r\nimport InfoContainer from \"./components/info/InfoContainer\"\r\nimport Help from \"./components/Help\";\r\nimport Account from \"./components/Account/accountContainer\";\r\nimport { HashRouter, Route} from \"react-router-dom\";\r\nimport css from './app.module.css';\r\nimport store from './redux/mystore'\r\nimport Data from \"./components/Data/Data\";\r\n\r\nfunction App() {\r\n    window.store=store;\r\n    return (\r\n        <div className={css.App}>\r\n            <HashRouter>\r\n                <Header/>\r\n                <div className={css.content}>\r\n                    <Route exact path=\"/\" render={()=><HomeWraper store={store} />} />\r\n                    <Route path=\"/categories\" render={()=><Categories store={store}/>}/>\r\n                    <Route path=\"/info\" render={()=><InfoContainer store={store} />}/>\r\n                    <Route path=\"/help\" render={Help}/>\r\n                    <Route path=\"/account/:id?\" render={()=><Account store={store}/>} />\r\n                    <Route path=\"/data\" render={()=><Data store={store}/>} />\r\n                </div>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"info_info__2-xHk\",\"calendar\":\"info_calendar__3gTQT\",\"infoTb\":\"info_infoTb__3Qvyx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"account\":\"account_account__2J1PN\",\"error\":\"account_error__Ky-iK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"entry\":\"Entry_entry__3uJUh\",\"textContainer\":\"Entry_textContainer__COK4t\",\"btnContainer\":\"Entry_btnContainer__1Vhgg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__85Oab\",\"logo\":\"Header_logo__1LBBB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"home_home__2gKgJ\",\"dateSelect\":\"home_dateSelect__2O5yz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"app_App__V0uA5\",\"content\":\"app_content__rQ5EC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"data\":\"Data_data__2E53k\",\"warn\":\"Data_warn__DNnHY\"};"],"sourceRoot":""}