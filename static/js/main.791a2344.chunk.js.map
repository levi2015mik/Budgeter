{"version":3,"sources":["components/Header.module.css","components/Calendar/Calendar.module.css","components/Header.jsx","components/home/Entry.jsx","components/Calendar/Selector.jsx","components/Calendar/MainTable.jsx","components/Calendar/Calendar.jsx","components/Calendar/SmallCalendar.jsx","components/home/Home.jsx","redux/HomeReducer.js","redux/TasksAccountsReducer.js","redux/actor.js","components/home/HomeWraper.jsx","components/categories/Categories.jsx","components/info/Info.jsx","redux/selectors.js","redux/HelpReducer.js","components/info/InfoContainer.js","components/Help.jsx","redux/mystore.js","components/Account/FormData.js","components/Account/elements.jsx","components/Account/Account.jsx","components/Account/validate.js","components/Account/accountContainer.js","App.js","serviceWorker.js","index.js","components/info/info.module.css","components/Account/account.module.css","components/home/Entry.module.css","components/home/home.module.css","app.module.css"],"names":["module","exports","Header","props","className","css","header","to","Entry","id","gray","accepted","color","NameStr","account","name","entry","type","key","disabled","onChange","toggleElSelect","checked","selected","textContainer","style","htmlFor","btnContainer","value","onClick","accept","del","Selector","day","showYear","subNow","toggleEl","month","year","addDate","MainTable","moment","locale","weekStr","weekCorrector","startMonth","endMonth","dayNames","week","weekdaysShort","dayNum","styleDirection","direction","i","j","selectedDate","map","el","selector","targeted","val","changeSelectedDate","Calendar","monthNames","months","useState","now","setNow","viewType","setViewType","setSelector","selectorChange","ev","currentTarget","date","setSelectedDate","daysInMonth","element","label","display","pos","newNow","subtract","add","cal","output","SmallCalendar","marginRight","valueOf","Home","useEffect","activateDataFilter","go","path","redirect","setRedirect","preAcceptEl","preAcceptElement","entries","home","dateSelect","textFieldValue","changeTextField","target","placeholder","changeActivateTime","activateTaskTime","addNewEntry","preAcceptSelected","deleteSelected","changeSelectedAll","filter","changeElSelection","deleteEntrie","ADD_NEW_ENTRY","CHANGE_ENTER_FIELD","DELETE","CHANGE_SELECTION","CHANGE_SELECTION_ALL","REFRESH_ALL","CHANGE_TASK_ACTIVATE_TIME","CHANGE_FILTER","DEFAULT_STATE","filteredEntries","newEntryName","newTask","deleteEntry","refreshEntries","tasks","changeFilter","HomeReducer","state","action","time","ADD_TASK","ADD_EMPTY_ACCOUNT","SUBMIT_ACCOUNT","LINK_TASKS_TO_ACCOUNT","activated","accounts","newAccountId","nextTaskId","addNewTask","delTask","addNewAccount","linkTasks","accountId","SubmitAccount","data","content","TasksAccountsReducer","tasksArr","length","newAccount","newTasksData","some","num","result","tasksFilter","params","conditions","CalendarCallback","filterTime","dispatch","getState","insertedData","isSame","addTask","TasksCcountsReducer","delForId","forEach","values","names","ids","console","log","Date","isNewTask","push","price","join","mapDispatchToProps","actor","sign","connect","Categories","Info","info","infoTb","setTime","CurrentSum","CountAccountsFromFiltered","CountTasksOfSelected","AVGDay","getAVGAccountsOfDay","AVWeek","getAVGAccountsOfWeek","AVGMonth","getAVGAccountsOfMonth","AVGYear","getAVGAccountsOfYear","countTimePeriodsInAccounts","period","counter","AVGOfPeriod","avgRes","periods","Number","AVGAccountsOfPeriod","getAccounts","FilteredAccounts","createSelector","HelpReducer","InfoTime","currentTimeFilter","reduce","sum","undefined","INFO_SET_TIME","selectors","Help","reducers","combineReducers","form","formReducer","store","createStore","load","states","applyMiddleware","thunk","save","FormData","createContext","Input","Consumer","context","input","e","meta","touched","error","warning","SimpleInput","NamesList","lockBtn","setLockBtn","fields","index","Field","component","pushEmptyElement","remove","removeElement","Params","FieldArray","Param","out","Formed","reduxForm","initialValues","validate","errors","isNaN","_error","handleSubmit","Form","onSubmit","valid","exit","AccountReduxForm","Account","isAccepted","match","currentAccountId","timeData","timeString","rawNames","format","err","history","split","initialize","dateTime","Provider","newTaskId","withRouter","App","window","exact","render","HomeWraper","InfoContainer","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.791a2344.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__85Oab\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"element\":\"Calendar_element__1Ktaq\",\"label\":\"Calendar_label__2T9-A\",\"cal\":\"Calendar_cal__3z9-c\",\"header\":\"Calendar_header__15GaA\",\"selector\":\"Calendar_selector__1NxqG\",\"selected\":\"Calendar_selected__2escT\",\"targeted\":\"Calendar_targeted__K-Ch0\"};","import React from \"react\";\r\nimport css from './Header.module.css'\r\nimport { NavLink} from \"react-router-dom\";\r\nfunction Header(props) {\r\n    return(\r\n        <header className={css.header}>\r\n            Personal accounting application\r\n            <ul>\r\n                <li><NavLink to=\"/\" >Home</NavLink></li>\r\n                <li><NavLink to=\"/categories\" >Categories</NavLink></li>\r\n                <li><NavLink to=\"/info\" >Info</NavLink></li>\r\n                <li><NavLink to=\"/help\" >Help</NavLink></li>\r\n            </ul>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\nimport css from \"./Entry.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Entry(props) {\r\n    let id = props.id;\r\n    let gray = props.accepted? {color: \"#bbbbbb\"}: {color:\"#000\"};\r\n    let NameStr = (props.accepted)? (<NavLink to={\"/account/\" + props.account}>{props.name}</NavLink>):props.name;\r\n    return(\r\n        <div className={css.entry}>\r\n            <input\r\n                type=\"checkbox\"\r\n                id = {id}\r\n                key = {id}\r\n                disabled = {props.accepted}\r\n                onChange = {()=>{props.toggleElSelect(id)}}\r\n                checked={props.selected}\r\n            />\r\n\r\n            <span className={css.textContainer} style={gray}>\r\n                <label htmlFor={id}>\r\n                    {NameStr}\r\n                </label>\r\n            </span>\r\n            <span className={css.btnContainer}>\r\n                <input\r\n                    type=\"button\"\r\n                    value=\"V\"\r\n                    disabled={props.accepted}\r\n                    onClick={()=>{props.accept(id)}}\r\n                />\r\n\r\n                <input\r\n                    type=\"button\"\r\n                    value=\"X\"\r\n                    disabled={props.accepted}\r\n                    onClick={()=>{props.del(id)}}\r\n                />\r\n            </span>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Entry;","import React from \"react\"\r\n\r\n/**\r\n * Модуль выбора месяца и года с выводом текущей позиции\r\n * TODO Добавить кастомизацию через css\r\n * @param {Object} props\r\n * {\r\n *  day? Дата\r\n *  month\r\n *  year\r\n *  {boolean} showYear? Показывать ли кнопки смены года\r\n *  {function} subNow Уменьшение даты\r\n *  {function} addDate Увеличение даты\r\n *  {function} toggleEl Показать / скрыть календарь\r\n * }\r\n * @constructor\r\n */\r\nfunction Selector(props) {\r\n    let day = typeof(props.day) !== \"undefined\"? props.day:\"\";\r\n    let showYear = typeof(props.showYear) !== \"undefined\"? props.showYear : \"false\";\r\n    return <>\r\n        {showYear &&\r\n            <input type=\"button\" value=\"<<\" onClick={() => {\r\n                props.subNow(\"Y\")\r\n            }}/>\r\n        }\r\n        <input type=\"button\" value=\"<\" onClick={()=>{\r\n            props.subNow(\"M\")\r\n        }}/>\r\n        <button onClick={props.toggleEl}>{`${day} ${props.month} ${props.year}`}</button>\r\n        <input type=\"button\" value=\">\" onClick={()=>{\r\n            props.addDate(\"M\")\r\n        }}/>\r\n        {showYear &&\r\n            <input type=\"button\" value=\">>\" onClick={() => {\r\n                props.addDate(\"Y\")\r\n            }}/>\r\n        }\r\n\r\n    </>\r\n}\r\n\r\nexport default Selector;","import React from \"react\"\r\nimport css from \"./Calendar.module.css\"\r\nimport moment from \"moment\"\r\n\r\n/**\r\n * Календарь на один месяц, представленный в виде таблицы.\r\n * Компонент практически полностью управляем извне и не имеет представления о текущей дате\r\n * TODO Добавить выходные с локализацией\r\n * @param {Object} props {\r\n *  {string} locale (ru, en, he ...)\r\n *  {number} startMonth Первый день недели для месяца в парадигме javascript (начиная от нуля)\r\n *  {number} endMonth Количество дней в месяце\r\n *  {string} selector\r\n *  {number} selectedDate\r\n *  {function} changeSelectedDate\r\n * }\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction MainTable(props) {\r\n\r\n    moment.locale(props.locale);\r\n    let weekStr = [];\r\n    let weekCorrector = 0;\r\n    let startMonth = props.startMonth;\r\n    let endMonth = props.endMonth;\r\n    let dayNames = [];\r\n    let week = moment.weekdaysShort();\r\n    let dayNum = 0;\r\n\r\n    // Русская корректировка\r\n    if(props.locale === \"ru\") {\r\n        weekCorrector = 1;\r\n        if(startMonth === 0) startMonth = 6;\r\n        else startMonth = startMonth - 1\r\n    }\r\n    // Ивритская корректировка\r\n    let styleDirection = {};\r\n    if(props.locale === \"he\") styleDirection = {direction:\"rtl\"};\r\n\r\n    for(let i = 0;i < 7;i ++){\r\n        weekStr[i] = week[i + weekCorrector];\r\n        if(i === 6 && weekCorrector) weekStr[i] = week[0];\r\n    }\r\n    for(let i = 0;i < 6;i ++){\r\n        dayNames[i] = [];\r\n\r\n        for(let j = 0;j < 7;j ++){\r\n            if(j >= startMonth && dayNum === 0){\r\n                dayNum ++ ;\r\n                dayNames[i][j] = {value:dayNum};\r\n                if(dayNum === props.selectedDate) {\r\n                    dayNames[i].selected = true;\r\n                    dayNames[i][j].selected = true;\r\n                }\r\n                continue;\r\n            }\r\n            if(dayNum > 0 && dayNum < endMonth){\r\n                dayNum ++ ;\r\n                dayNames[i][j] = {value:dayNum};\r\n                if(dayNum === props.selectedDate) {\r\n                    dayNames[i].selected = true;\r\n                    dayNames[i][j].selected = true;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            dayNames[i][j] = {value:\"\"};\r\n        }\r\n    }\r\n\r\n\r\n    return<>\r\n        <table style={styleDirection}>\r\n            <thead>\r\n            <tr>\r\n                {weekStr.map((el,i)=>\r\n                    <th key={i}>{el}</th>\r\n                )}\r\n            </tr>\r\n            </thead>\r\n            <tbody className={props.selector === \"M\" || props.selector === \"Y\"? `${css.selected} ${css.targeted}`: \"\" }>\r\n            {dayNames.map((el,i) =>\r\n                <tr\r\n                    className={`${el.selected? css.selected: \"\"} ${props.selector === \"w\"? css.targeted:\"\"}`}\r\n                    key={i}\r\n                >{\r\n                    el.map((val,j)=>\r\n                        <td\r\n                            className={`${val.selected? css.selected: \"\"} ${props.selector === \"d\"? css.targeted:\"\"}`}\r\n                            onClick={()=>{props.changeSelectedDate(val.value)}}\r\n                            key={j}\r\n                        >{val.value}</td>\r\n                    )\r\n                }</tr>\r\n            )}</tbody>\r\n        </table>\r\n\r\n    </>\r\n}\r\n\r\nexport default MainTable;","import moment from \"moment\"\r\nimport \"moment/locale/ru\"\r\nimport \"moment/locale/he\"\r\nimport React, {useState} from \"react\";\r\nimport css from \"./Calendar.module.css\"\r\nimport Selector from \"./Selector\";\r\nimport MainTable from \"./MainTable\";\r\n\r\n/**\r\n * Календарь - компонент выбора дня - недели - месяца - года, имеющий собственное состояние\r\n * Умеет рпботать с русским форматом\r\n * TODO Сделать компонент управляемым (через state.HomeReducer)\r\n * @param {Object} props {\r\n *  {string} locale\r\n *  {string) label\r\n *  {function} output\r\n * }\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction Calendar(props){\r\n    moment.locale(props.locale);\r\n    // Названия месяцев и дней недели из локализаторов moment\r\n    let monthNames = moment.months();\r\n    // Инициализация текущей даты через хук\r\n    let [now, setNow] = useState(moment());\r\n    function addDate(pos) {\r\n        let newNow = moment(now.add(1,pos));\r\n        setNow(newNow)\r\n    }\r\n\r\n    function subNow(pos) {\r\n        let newNow = moment(now.subtract(1,pos));\r\n        setNow(newNow)\r\n    }\r\n\r\n    function today() {\r\n        let now = moment();\r\n        setNow(moment());\r\n        setSelectedDate(now.date())\r\n    }\r\n\r\n    // Видимость календаря\r\n    let [viewType, setViewType] = useState(false);\r\n    function toggleEl() {\r\n        setViewType(!viewType);\r\n    }\r\n\r\n    // Селектор выбора день/ месяц/ год\r\n    let [selector, setSelector] = useState(\"d\");\r\n    function selectorChange(ev) {\r\n        setSelector(ev.currentTarget.value)\r\n    }\r\n\r\n    // Выбранная дата\r\n    let [selectedDate, setSelectedDate] = useState(moment().date());\r\n    function changeSelectedDate(date) {\r\n        if(date)\r\n        setSelectedDate(date)\r\n    }\r\n\r\n    function output() {\r\n        setViewType(false);\r\n        props.output({year:now.year(),month:now.month(),date:selectedDate,selector:selector})\r\n    }\r\n\r\n    // Задание первого и последнего дней\r\n    let startMonth = now.date(1).day();\r\n    let endMonth = now.daysInMonth();\r\n\r\n    return <div className={css.element}>\r\n        <div className={css.header}>\r\n            <span className={css.label}>{props.label}</span>\r\n            <div style={{display:\"inline-block\"}}>\r\n            <Selector\r\n                showYear={true}\r\n                toggleEl={toggleEl}\r\n                subNow={subNow}\r\n                addDate={addDate}\r\n                month={monthNames[now.month()]}\r\n                year={now.year()}\r\n            />\r\n            {viewType &&\r\n            <div className={css.cal}>\r\n                <MainTable\r\n                    locale={props.locale}\r\n                    startMonth={startMonth}\r\n                    endMonth={endMonth}\r\n                    selector={selector}\r\n                    selectedDate={selectedDate}\r\n                    changeSelectedDate={changeSelectedDate}\r\n                />\r\n\r\n                <div className={css.selector}>\r\n                    <h3>Select</h3>\r\n                    <label><input type=\"radio\" value={\"Y\"} name=\"selector\" onChange={selectorChange} checked={selector === \"Y\"} />Year</label><br/>\r\n                    <label><input type=\"radio\" value={\"M\"} name=\"selector\" onChange={selectorChange} checked={selector === \"M\"} />Month</label><br/>\r\n                    <label><input type=\"radio\" value={\"w\"} name=\"selector\" onChange={selectorChange} checked={selector === \"w\"} />Week</label><br/>\r\n                    <label><input type=\"radio\" value={\"d\"} name=\"selector\" onChange={selectorChange} checked={selector === \"d\"} />Day</label>\r\n                </div>\r\n                <div>\r\n                    <input type=\"button\" value=\"Reset\" onClick={()=>setViewType(false)}/>\r\n                    <input type=\"button\" value=\"Now\" onClick={today}/>\r\n                    <input type=\"button\" value=\"OK\" onClick={output}/>\r\n                </div>\r\n            </div>}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Calendar;","import React, {useState} from \"react\"\r\nimport moment from \"moment\"\r\nimport \"moment/locale/ru\"\r\nimport \"moment/locale/he\"\r\nimport css from \"./Calendar.module.css\"\r\nimport Selector from \"./Selector\";\r\nimport MainTable from \"./MainTable\";\r\n\r\n/**\r\n * Маленький календарь с возможностью выбора только даты\r\n * TODO Cделать компонент управляемым\r\n * @param {Object} props {\r\n *  {string} locale\r\n *  {string) label\r\n *  {function} output\r\n * }\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction SmallCalendar(props) {\r\n    moment.locale(props.locale);\r\n    // Названия месяцев и дней недели из локализаторов moment\r\n    let monthNames = moment.months();\r\n    // Инициализация текущей даты через хук\r\n    let [now, setNow] = useState(moment());\r\n    function addDate(pos) {\r\n        let newNow = moment(now.add(1,pos));\r\n        setNow(newNow)\r\n    }\r\n\r\n    function subNow(pos) {\r\n        let newNow = moment(now.subtract(1,pos));\r\n        setNow(newNow)\r\n    }\r\n\r\n    function today() {\r\n        let now = moment();\r\n        setNow(moment());\r\n        setSelectedDate(now.date())\r\n    }\r\n\r\n    // Видимость календаря\r\n    let [viewType, setViewType] = useState(false);\r\n    function toggleEl() {\r\n        setViewType(!viewType);\r\n    }\r\n    // Выбранная дата\r\n    let [selectedDate, setSelectedDate] = useState(moment().date());\r\n    function changeSelectedDate(date) {\r\n        if(date)\r\n            setSelectedDate(date)\r\n    }\r\n\r\n    function output() {\r\n        setViewType(false);\r\n        let date = moment();\r\n        date.year(now.year());\r\n        date.month(now.month());\r\n        date.date(selectedDate);\r\n        props.output(date.valueOf());\r\n    }\r\n    // Задание первого и последнего дней\r\n    let startMonth = now.date(1).day();\r\n    let endMonth = now.daysInMonth();\r\n\r\n    return <div className={css.element} style={{\"float\":\"none\",marginRight:\"0.3em\"}}>\r\n        <div className={css.header}>\r\n            <span className={css.label}>{props.label}</span>\r\n            <div style={{display:\"inline-block\"}}>\r\n            <Selector\r\n                day={selectedDate}\r\n                showYear={false}\r\n                toggleEl={toggleEl}\r\n                subNow={subNow}\r\n                addDate={addDate}\r\n                month={monthNames[now.month()]}\r\n                year={now.year()}\r\n            />\r\n            {viewType &&\r\n            <div className={css.cal}>\r\n                <MainTable\r\n                    locale={props.locale}\r\n                    startMonth={startMonth}\r\n                    endMonth={endMonth}\r\n                    selector={\"d\"}\r\n                    selectedDate={selectedDate}\r\n                    changeSelectedDate={changeSelectedDate}\r\n                />\r\n                <div>\r\n                    <input type=\"button\" value=\"Reset\" onClick={()=>setViewType(false)}/>\r\n                    <input type=\"button\" value=\"Now\" onClick={today}/>\r\n                    <input type=\"button\" value=\"OK\" onClick={output}/>\r\n                </div>\r\n            </div>}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default SmallCalendar;","import React, {useEffect, useState} from \"react\";\r\nimport css from \"./home.module.css\"\r\nimport Entry from \"./Entry\"\r\nimport Calendar from \"../Calendar/Calendar\";\r\nimport SmallCalendar from \"../Calendar/SmallCalendar\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nfunction Home(props) {\r\n    // Запуск фильтрации для вывода данных. Запускается только один раз\r\n    useEffect(props.activateDataFilter,[]);\r\n\r\n    let [redirect, setRedirect] = useState({go:false,path:\"/account/1\"});\r\n\r\n    function changeField(ev) {\r\n        props.changeTextField(ev.target.value);\r\n    }\r\n\r\n    function preAcceptEl(id) {\r\n        props.preAcceptElement(id);\r\n        setRedirect({go:true,to:\"/account\"})\r\n    }\r\n    function preAcceptSelected() {\r\n\r\n        props.preAcceptSelected();\r\n        setRedirect({go:true,to:\"/account\"})\r\n\r\n    }\r\n\r\n    const entries = props.entries;\r\n\r\n    return(\r\n        <div className={css.home}>\r\n            {redirect.go && <Redirect to={redirect.to}/>}\r\n            <div className={css.dateSelect}>\r\n                <input value={props.textFieldValue} type=\"text\" onChange={changeField} placeholder=\"Name of entry\" />\r\n                <SmallCalendar\r\n                    locale={\"ru\"}\r\n                    label={\"Enter date to activate task\"}\r\n                    output={props.changeActivateTime}\r\n                    value={props.activateTaskTime}\r\n                />\r\n                <input value=\"Add new entry\" type=\"button\" onClick={props.addNewEntry}/>\r\n            </div>\r\n            <div>\r\n                <input value=\"Accept selected\" type=\"button\" onClick={preAcceptSelected}/>\r\n                <input value=\"Delete selected\" type=\"button\" onClick={props.deleteSelected}/>\r\n\r\n                <input\r\n                    value=\"Select all\"\r\n                    type=\"button\"\r\n                    onClick={()=>{props.changeSelectedAll(true)}}/>\r\n\r\n                <input\r\n                    value=\"deselect all\"\r\n                    type=\"button\"\r\n                    onClick={()=>{props.changeSelectedAll(false)}}/>\r\n\r\n                <Calendar\r\n                    locale=\"ru\"\r\n                    label=\"Filter\"\r\n                    value={props.filter}\r\n                    output={props.activateDataFilter}\r\n                />\r\n\r\n                <hr/>\r\n            </div>\r\n            <div>\r\n            {entries.map(el=>\r\n                <Entry\r\n                       key={el.id}\r\n                       name={el.name}\r\n                       id={el.id}\r\n                       accepted={el.accepted}\r\n                       account={el.account}\r\n                       selected={el.selected}\r\n                       toggleElSelect = {props.changeElSelection}\r\n                       accept={preAcceptEl}\r\n                       del={props.deleteEntrie}\r\n                />\r\n            )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","const ADD_NEW_ENTRY = \"ADD_NEW_ENTRY\";\r\nconst CHANGE_ENTER_FIELD = \"CHANGE_ENTER_FIELD\";\r\nconst DELETE = \"DELETE\";\r\nconst CHANGE_SELECTION = \"CHANGE_SELECTION\";\r\nconst CHANGE_SELECTION_ALL = \"CHANGE_SELECTION_ALL\";\r\nconst REFRESH_ALL = \"REFRESH_ALL\";\r\nconst CHANGE_TASK_ACTIVATE_TIME = \"CHANGE_TASK_ACTIVATE_TIME\";\r\nconst CHANGE_FILTER = \"CHANGE_FILTER\";\r\n\r\nconst DEFAULT_STATE = {\r\n    filteredEntries:[],\r\n    newEntryName:\"\",\r\n    activateTaskTime:1568648224761,\r\n    filter:{},\r\n};\r\nfunction HomeReducer(state = DEFAULT_STATE,action) {\r\n\r\n    switch (action.type){\r\n\r\n        case REFRESH_ALL:\r\n            return { ...state,filteredEntries: action.tasks};\r\n        case CHANGE_ENTER_FIELD:\r\n            return { ...state,newEntryName: action.value };\r\n        case CHANGE_TASK_ACTIVATE_TIME:\r\n            return { ...state, activateTaskTime: action.time};\r\n        case CHANGE_FILTER:\r\n            return { ...state, filter:action.filter};\r\n        case ADD_NEW_ENTRY:\r\n            return {\r\n                ...state,\r\n                newEntryName: \"\",\r\n            };\r\n        case DELETE:\r\n            if(action.value){\r\n                let entries = state.filteredEntries.filter((el) => el.id !== action.value);\r\n                return { ...state,filteredEntries:entries}\r\n            } else {\r\n                let entries = state.filteredEntries.filter((el) => !el.selected);\r\n                return { ...state,filteredEntries:entries}\r\n\r\n            }\r\n\r\n        case CHANGE_SELECTION: {\r\n            let entries = state.filteredEntries.map((el) => {\r\n                if (el.id === action.value) el.selected = !el.selected;\r\n                return el;\r\n            });\r\n            return {...state, filteredEntries: entries};\r\n        }\r\n\r\n        case CHANGE_SELECTION_ALL: {\r\n            let entries = state.filteredEntries.map((el) => {\r\n                if(!el.accepted)\r\n                el.selected = action.value;\r\n                return el;\r\n            });\r\n            return {...state, filteredEntries: entries};\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\n// Action creators\r\nconst changeTextField =(value)=>({type:CHANGE_ENTER_FIELD,value: value});\r\nconst changeActivateTime = (time) =>({type:CHANGE_TASK_ACTIVATE_TIME,time:time});\r\nconst addNewEntry = (newTask) => ({type:ADD_NEW_ENTRY,newTask:newTask});\r\nconst deleteEntry = (id) => ({type:DELETE,value:id});\r\nconst changeElSelection = (id) => ({type:CHANGE_SELECTION,value:id});\r\nconst changeSelectedAll = (sign) => ({type:CHANGE_SELECTION_ALL,value:sign});\r\nconst refreshEntries = (tasks) => ({type:REFRESH_ALL,tasks:tasks});\r\nconst changeFilter = (filter) => ({type:CHANGE_FILTER,filter:filter});\r\n\r\nexport {\r\n    changeTextField,\r\n    addNewEntry,\r\n    changeActivateTime,\r\n    deleteEntry,\r\n    changeElSelection,\r\n    changeSelectedAll,\r\n    refreshEntries,\r\n    changeFilter,\r\n}\r\nexport default HomeReducer\r\n","const ADD_TASK = \"ADD_TASK\";\r\nconst DELETE = \"DELETE\";\r\nconst ADD_EMPTY_ACCOUNT = \"ADD_EMPTY_ACCOUNT\";\r\nconst SUBMIT_ACCOUNT = \"SUBMIT_ACCOUNT\";\r\nconst LINK_TASKS_TO_ACCOUNT = \"LINK_TASKS_TO_ACCOUNT\";\r\nconst DEFAULT_STATE = {\r\n    tasks:[\r\n        {name:\"Торт с марципаном\", id:0, accepted:false, activated:1568581200000},\r\n        {name:\"Укроп\", id:1, accepted:false, activated:1568581200640},\r\n        {name:\"Горчица\", id:2, accepted:false, activated:1568667600000},\r\n        {name:\"Набор юный террорист из супермаркета\", id:3, accepted:false, activated:1568667600500},\r\n        {name:\"Шакшука с кофе\", id:4, accepted:false, activated:1568667600720}\r\n    ],\r\n    accounts:[],\r\n    newAccountId:0,\r\n    nextTaskId: 5\r\n};\r\n\r\nfunction TasksAccountsReducer(state = DEFAULT_STATE, action) {\r\n    switch (action.type){\r\n        case ADD_TASK:\r\n            let tasksArr = [...state.tasks,action.newTask];\r\n            return {...state,tasks:tasksArr,nextTaskId:tasksArr.length};\r\n        case DELETE:\r\n            return {...state,tasks:state.tasks.filter((el)=> el.id !== action.id)};\r\n\r\n        case ADD_EMPTY_ACCOUNT:\r\n            /*\r\n                Сложный элемент, требует проверки\r\n            */\r\n\r\n            let accountId = state.accounts.length; // Определяем идентификатор будущего счета -- Возможно потом станет зависимо от бэкенда\r\n            let newAccount = {tasks:action.tasks, id:accountId, accepted:false,time:action.time}; // Создаем объект нового счета со ссылками на таски\r\n\r\n            return {\r\n                ...state,\r\n                accounts:[ ...state.accounts,newAccount],\r\n                newAccountId: accountId\r\n            }; // Композиция всех данных - счетов и тасков\r\n\r\n        case LINK_TASKS_TO_ACCOUNT:\r\n            let newTasksData = state.tasks.map((el)=>{ // Вносим ссылку в таски\r\n                if(action.tasks.some((num)=>num === el.id)){ // Проверяем, входит ли таск в число выбранных\r\n                    el.account = action.accountId; //заносим идентификатор\r\n                    el.accepted = true      // Устанавливаем статус accepted\r\n\r\n                }\r\n                return el;\r\n            });\r\n            return { ...state,tasks: newTasksData};\r\n\r\n        case SUBMIT_ACCOUNT:\r\n            let result = { ...state,accounts:[ ...state.accounts]};\r\n            result.accounts[action.id] = {\r\n                ...result.accounts[action.id],\r\n                ...action.content,\r\n                accepted:true};\r\n            return result;\r\n        default: return state;\r\n    }\r\n}\r\n\r\n// actions\r\nconst addNewTask = (newTask) => ({\r\n    type: ADD_TASK,\r\n    newTask:newTask\r\n});\r\n\r\nconst delTask = (id) => ({\r\n    type:DELETE,\r\n    id:id\r\n});\r\n\r\n/**\r\n * Создание нового счета с привязкой к таскам\r\n * @param {Array} tasks Перечень идентификаторов тасков\r\n * @param time\r\n * @returns {{type: string, tasks: *}}\r\n */\r\nconst addNewAccount = (tasks,time) => ({type:ADD_EMPTY_ACCOUNT,tasks:tasks,time:time});\r\n\r\n/**\r\n * Внесение в таски ссылок на аккаунт\r\n * @param accountId Идентификатор счета\r\n * @param {Array} tasks Массив идентификаторов тасков\r\n * @returns {{type: string, accountId: *, tasks: *}}\r\n */\r\nconst linkTasks = (accountId,tasks) =>({type:LINK_TASKS_TO_ACCOUNT,accountId:accountId,tasks:tasks});\r\n/**\r\n * Внесение в счет данных\r\n * @param {Number} id Идентификатор аккаунта\r\n * @param {Object} data Набор параметров счета\r\n * @returns {{type: string, id: *, content: *}}\r\n * @constructor\r\n */\r\nconst SubmitAccount = (id, data) =>({type: SUBMIT_ACCOUNT,id:id,content:data});\r\nexport {\r\n    addNewTask,\r\n    delTask,\r\n    addNewAccount,\r\n    linkTasks,\r\n    SubmitAccount\r\n}\r\nexport default TasksAccountsReducer;","import * as HomeReducer from \"./HomeReducer\"\r\nimport * as TasksCcountsReducer from \"./TasksAccountsReducer\"\r\nimport moment from \"moment\";\r\n/**\r\n * Этот фацйл содержит функции, манипулирующие данными store\r\n * - Создание ногого таска и его запись в две ветки store.\r\n * - Фильтрация тасков по времени и закидывание в HomeReducer\r\n * - Удаление ненужного таска из обеих веток\r\n **/\r\n\r\n/**\r\n * Добавление новой таски. Создает объект и вносит его в хранилище.\r\n * @returns {Function}\r\n */\r\nfunction addTask() {\r\n    return (dispatch, getState) =>{\r\n        let state = getState();\r\n        let activateTaskTime = state.HomeReducer.activateTaskTime;\r\n        let nextTaskId = state.TasksAccountsReducer.tasks.length;\r\n        let newEntryName = state.HomeReducer.newEntryName;\r\n        let newTask = {\r\n            name:newEntryName,\r\n            id:nextTaskId,\r\n            accepted:false,\r\n            activateTaskTime: activateTaskTime\r\n        };\r\n        dispatch(TasksCcountsReducer.addNewTask(newTask));\r\n        dispatch(HomeReducer.addNewEntry());\r\n        dispatch(tasksFilter());\r\n    }\r\n}\r\n\r\n// Обработка данных от компонента Calendar\r\nfunction CalendarCallback(conditions){\r\n    if(typeof conditions ===  \"undefined\") {\r\n        let now = moment();\r\n        conditions = {\r\n            year: now.year(),\r\n            month: now.month(),\r\n            date: now.date(),\r\n            selector: \"M\"\r\n        };\r\n    }\r\n    let filterTime = moment({\r\n        year:conditions.year,\r\n        month:conditions.month,\r\n        date:conditions.date\r\n    });\r\n\r\n    return [conditions,filterTime]\r\n}\r\n\r\n// Фильтрация данных, выводимых пользователю\r\nfunction tasksFilter(params){\r\n    const [conditions,filterTime] = CalendarCallback(params);\r\n    return (dispatch, getState) =>{\r\n        let insertedData = getState().TasksAccountsReducer.tasks;\r\n\r\n        insertedData = insertedData.filter(el =>{\r\n            let time = moment(el.activated);\r\n            return time.isSame(filterTime,conditions.selector)\r\n        });\r\n\r\n        insertedData = insertedData.map((el) => ({...el,selected:false}));\r\n\r\n        dispatch(HomeReducer.refreshEntries(insertedData));\r\n        dispatch(HomeReducer.changeFilter(conditions));\r\n    }\r\n}\r\n\r\n/**\r\n * Синхронное удаление данных из хранилища и внешнего вида\r\n * @param id?\r\n * @returns {Function}\r\n */\r\nfunction delTask(id) {\r\n    return (dispatch, getState) =>{\r\n        function delForId(id) {\r\n            dispatch(HomeReducer.deleteEntry(id));\r\n            dispatch(TasksCcountsReducer.delTask(id));\r\n        }\r\n\r\n        if(id && typeof(id) === \"number\") delForId(id);\r\n        else {\r\n            getState().HomeReducer.filteredEntries.forEach((el)=>{\r\n                if(el.selected)delForId(el.id);\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nfunction preAcceptElement(id) {\r\n    return (dispatch)=>{\r\n        dispatch(TasksCcountsReducer.addNewAccount([id],Date.now()));\r\n    }\r\n}\r\n\r\nfunction preAcceptSelected() {\r\n    return (dispatch, getState)=>{\r\n        let entries = getState().HomeReducer.filteredEntries;\r\n        let selected = entries.filter((el)=> el.selected).map(el=>el.id);\r\n        dispatch(TasksCcountsReducer.addNewAccount(selected,Date.now()));\r\n    }\r\n}\r\n\r\n/**\r\n * Принятие счета\r\n * @param id Идентификатор счета\r\n * @param {Object} values Набор параметров, полученных при заполнении формы\r\n * @param {Array} names Набор наименований, изначально переданных в форму\r\n * @param {Array} ids Набор идентификаторов тасков, выбранных для создания счета\r\n */\r\nfunction accept(id, values, names, ids) {\r\n    //\r\n    console.log(\"accept\");\r\n    return (dispatch,getState) =>{\r\n        let state = getState().TasksAccountsReducer;\r\n\r\n        let account = {tasks:[]};\r\n        let newTask = {name:[],id:state.nextTaskId,account: state.newAccountId,activated:Date.now(),accepted: true};\r\n        let isNewTask = false;\r\n\r\n        for(let i = 0; i < values.names.length;i ++){\r\n            if(values.names[i] === names[i])\r\n                account.tasks.push(ids[i]);\r\n            else if(values.names[i] !== \"\"){\r\n                isNewTask = true;\r\n                account.tasks.push(state.nextTaskId);\r\n                newTask.name.push(values.names[i])\r\n            }\r\n        }\r\n        account.price = values.price;\r\n\r\n        if(isNewTask){\r\n            newTask.name = newTask.name.join(\", \");\r\n            dispatch(TasksCcountsReducer.addNewTask(newTask))\r\n        }\r\n\r\n        dispatch(TasksCcountsReducer.linkTasks(id,ids));\r\n        dispatch(TasksCcountsReducer.SubmitAccount(id,account))\r\n        // -- /\r\n    }\r\n}\r\n\r\nexport default {\r\n    addTask,\r\n    tasksFilter,\r\n    delTask,\r\n    accept,\r\n    preAcceptElement: preAcceptElement,\r\n    preAcceptSelected: preAcceptSelected\r\n}","import Home from \"./Home\"\r\nimport {connect} from \"react-redux\";\r\nimport * as importedData from \"../../redux/HomeReducer\"\r\nimport actor from \"../../redux/actor\"\r\n/*\r\n* Контейнер для передачи State в Home\r\n* */\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        entries: state.HomeReducer.filteredEntries,\r\n        textFieldValue: state.HomeReducer.newEntryName,\r\n        filter:state.HomeReducer.filter,\r\n        activateTaskTime:state.HomeReducer.activateTaskTime,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    changeTextField:importedData.changeTextField,\r\n    addNewEntry:actor.addTask,\r\n    activateDataFilter:actor.tasksFilter,\r\n    preAcceptElement:actor.preAcceptElement,\r\n    preAcceptSelected:actor.preAcceptSelected,\r\n    deleteEntrie:actor.delTask,\r\n    deleteSelected:actor.delTask,\r\n    changeElSelection:importedData.changeElSelection,\r\n    changeSelectedAll:importedData.changeSelectedAll,\r\n    changeActivateTime:importedData.changeActivateTime,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\r\n\r\n","import React from \"react\";\r\n\r\nfunction Categories(props) {\r\n    return(<div>Cat</div>)\r\n}\r\n\r\nexport default Categories","import React from \"react\";\r\nimport css from \"./info.module.css\"\r\nimport Calendar from \"../Calendar/Calendar\"\r\n\r\n\r\n/**\r\n * Вывод информации о затратах на выбранный месяц, день, неделю, год, а также средних за день, неделю или месяц\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction Info(props) {\r\n    return <div className={css.info}>Info\r\n        <table className={css.infoTb}>\r\n            <caption className={css.infoTb}>\r\n                <span className={css.infoTb}>Data of expenses</span>\r\n                <Calendar\r\n                    locale=\"ru\"\r\n                    output={props.setTime}\r\n                />\r\n            </caption>\r\n            <tbody className={css.infoTb}>\r\n            <tr className={css.infoTb}>\r\n                <td className={css.infoTb}>Current time expenses</td>\r\n                <td className={css.infoTb}>{props.CurrentSum}</td>\r\n                <td className={css.infoTb}>Accounts: {props.CountAccountsFromFiltered}</td>\r\n                <td className={css.infoTb}>Tasks: {props.CountTasksOfSelected}</td>\r\n                </tr>\r\n            <tr className={css.infoTb}><td className={css.infoTb}>Average day expenses</td>\r\n                <td className={css.infoTb}>{props.AVGDay}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            <tr className={css.infoTb}><td className={css.infoTb}>Average accounts of day</td>\r\n                <td className={css.infoTb}>{props.getAVGAccountsOfDay}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            <tr className={css.infoTb}>\r\n                <td className={css.infoTb}>Average week expenses</td>\r\n                <td className={css.infoTb}>{props.AVWeek}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            <tr className={css.infoTb}><td className={css.infoTb}>Average accounts of week</td>\r\n                <td className={css.infoTb}>{props.getAVGAccountsOfWeek}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            <tr className={css.infoTb}>\r\n                <td className={css.infoTb}>Average month expenses</td>\r\n                <td className={css.infoTb}>{props.AVGMonth}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            <tr className={css.infoTb}>\r\n                <td className={css.infoTb}>Average accounts of month</td>\r\n                <td className={css.infoTb}>{props.getAVGAccountsOfMonth}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            <tr className={css.infoTb}>\r\n                <td className={css.infoTb}>Average year expenses</td>\r\n                <td className={css.infoTb}>{props.AVGYear}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            <tr className={css.infoTb}>\r\n                <td className={css.infoTb}>Average accounts of year</td>\r\n                <td className={css.infoTb}>{props.getAVGAccountsOfYear}</td>\r\n                <td className={css.infoTb}> </td>\r\n                <td className={css.infoTb}> </td>\r\n            </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n}\r\n\r\nexport default Info;\r\n","import {createSelector} from \"reselect\"\r\nimport moment from \"moment\"\r\n\r\nfunction CalendarCallback(conditions){\r\n    if( typeof conditions ===  \"undefined\" || typeof conditions.selector ===  \"undefined\") {\r\n        let now = moment();\r\n        conditions = {\r\n            year: now.year(),\r\n            month: now.month(),\r\n            date: now.date(),\r\n            selector: \"M\"\r\n        };\r\n    }\r\n    let filterTime = moment({\r\n        year:conditions.year,\r\n        month:conditions.month,\r\n        date:conditions.date\r\n    });\r\n\r\n    return [filterTime,conditions.selector]\r\n}\r\n\r\n/**\r\n * Расчет количества периодов (дней, недель, месяцев или лет в заданном массиве счетов)\r\n * @param accounts\r\n * @param period\r\n * @returns {number}\r\n */\r\nfunction countTimePeriodsInAccounts(accounts, period) {\r\n    let counter = 0;\r\n    let time = moment(0);\r\n    accounts.forEach((el)=>{\r\n        let now = moment(el.time);\r\n        if(!now.isSame(time,period)){\r\n            counter ++;\r\n            time = now;\r\n        }\r\n    });\r\n    return counter;\r\n}\r\n\r\n/**\r\n * Расчет среднех расходов за период\r\n * @param accounts\r\n * @param period\r\n * @returns {number}\r\n * @constructor\r\n */\r\nfunction AVGOfPeriod(accounts, period) {\r\n    let avgRes = 0;\r\n    let periods = countTimePeriodsInAccounts(accounts,period);\r\n    accounts.forEach((el)=>{\r\n        avgRes += Number(el.price);\r\n    });\r\n    return avgRes / periods\r\n}\r\n\r\n/**\r\n * Среднее количество счетов за период\r\n * @param accounts\r\n * @param period\r\n * @returns {number}\r\n * @constructor\r\n */\r\nfunction AVGAccountsOfPeriod(accounts, period) {\r\n    let periods = countTimePeriodsInAccounts(accounts,period);\r\n    return accounts.length / periods;\r\n}\r\n\r\nexport const getAccounts = (state) => state.TasksAccountsReducer.accounts;\r\n\r\nexport const getTimeFilterFromInfo = (state) => state.HelpReducer.InfoTime;\r\n\r\n/*\r\nСелектор фильтрации счетов, выбранных по времени с помощью getTimeFilterFromInfo\r\n */\r\nexport const FilteredAccounts = createSelector([getAccounts,getTimeFilterFromInfo],(accounts,filter) =>{\r\n    let [currentTimeFilter,conditions] = CalendarCallback(filter);\r\n    return accounts.filter((el)=>moment(el.time).isSame(currentTimeFilter,conditions));\r\n});\r\n\r\n/*\r\nСуммарная стоимость отфильтрованных данных\r\n */\r\nexport const CurrentSum = createSelector(FilteredAccounts,(accounts)=>{\r\n    return accounts.reduce((sum,el) => {\r\n        let price = el.price !== undefined ? el.price:0;\r\n        return sum + Number(price);\r\n    },0)\r\n});\r\n\r\nexport const CountAccountsFromFiltered = createSelector(FilteredAccounts,(accounts)=>accounts.length);\r\n\r\nexport const CountTasksOfSelected = createSelector(FilteredAccounts,(accounts)=>\r\n    accounts.reduce((tasks,el)=>el.tasks.length + tasks,0)\r\n);\r\n\r\nexport const AVGDay = createSelector([getAccounts],\r\n    (accounts)=> {\r\n        return AVGOfPeriod(accounts,\"d\")});\r\n\r\nexport const AVWeek = createSelector([getAccounts],\r\n    (accounts)=> {\r\n        return AVGOfPeriod(accounts,\"W\")});\r\n\r\nexport const AVGMonth = createSelector([getAccounts],\r\n    (accounts)=> {\r\n        return AVGOfPeriod(accounts,\"M\")});\r\n\r\nexport const AVGYear = createSelector([getAccounts],\r\n    (accounts)=> {\r\n        return AVGOfPeriod(accounts,\"Y\")});\r\n\r\n\r\nexport const getAVGAccountsOfDay = createSelector([getAccounts],(accounts)=>AVGAccountsOfPeriod(accounts,\"d\"));\r\nexport const getAVGAccountsOfWeek = createSelector([getAccounts],(accounts)=>AVGAccountsOfPeriod(accounts,\"W\"));\r\nexport const getAVGAccountsOfMonth = createSelector([getAccounts],(accounts)=>AVGAccountsOfPeriod(accounts,\"M\"));\r\nexport const getAVGAccountsOfYear = createSelector([getAccounts],(accounts)=>AVGAccountsOfPeriod(accounts,\"Y\"));","/*\r\n#Вспомогательная ветвь state, хранящая данные об элементах интерфейса, не работающих через redux-form\r\n- Календарь для фильтрации времени из Info\r\n */\r\nconst INFO_SET_TIME = \"INFO_SET_TIME\";\r\n\r\nconst DEFAULT_STATE = {\r\n    InfoTime:{}\r\n};\r\n\r\nexport default function HelpReducer(state = DEFAULT_STATE, action){\r\n    switch (action.type){\r\n        case INFO_SET_TIME:\r\n            return {...state,InfoTime:action.time};\r\n        default: return state;\r\n    }\r\n}\r\n\r\nconst setInfoTime = (time) =>({type:INFO_SET_TIME,time:time});\r\n\r\nexport {\r\n    setInfoTime\r\n}","import Info from \"./Info\"\r\nimport {connect} from \"react-redux\"\r\nimport * as selectors from \"../../redux/selectors\"\r\n\r\nimport * as HelpReducer from \"../../redux/HelpReducer\"\r\n\r\nconst mapStateToProps = (state) => ({\r\n    FilteredAccounts:selectors.FilteredAccounts(state), // Only for example\r\n    CurrentSum:selectors.CurrentSum(state),\r\n    CountAccountsFromFiltered: selectors.CountAccountsFromFiltered(state),\r\n    CountTasksOfSelected: selectors.CountTasksOfSelected(state),\r\n    AVGDay: selectors.AVGDay(state),\r\n    AVWeek: selectors.AVWeek(state),\r\n    AVGMonth: selectors.AVGMonth(state),\r\n    AVGYear: selectors.AVGYear(state),\r\n    getAVGAccountsOfDay: selectors.getAVGAccountsOfDay(state),\r\n    getAVGAccountsOfWeek: selectors.getAVGAccountsOfWeek(state),\r\n    getAVGAccountsOfMonth: selectors.getAVGAccountsOfMonth(state),\r\n    getAVGAccountsOfYear: selectors.getAVGAccountsOfYear(state),\r\n});\r\nconst mapDispatchToProps = {\r\n    setTime:HelpReducer.setInfoTime\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Info);\r\n","import React from \"react\";\r\n\r\nfunction Help(props) {\r\n    return(<div>Help</div>)\r\n}\r\n\r\nexport default Help","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport HomeReducer from \"./HomeReducer\"\r\nimport TasksAccountsReducer from \"./TasksAccountsReducer\"\r\nimport thunk from \"redux-thunk\"\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport {save,load} from \"redux-localstorage-simple\"\r\nimport HelpReducer from \"./HelpReducer\";\r\n\r\n/*\r\n Хранилище записывается в localstorage с помощью redux-localstorage-simple.\r\n Это решение имеет недостаток - все пишется в одну строку - json операции и синхронное сохранение вылезут на больших объемах\r\n */\r\nlet reducers = combineReducers({HomeReducer,TasksAccountsReducer, HelpReducer,form:formReducer});\r\nlet store = createStore(reducers,load({ states:[\"TasksAccountsReducer\"]}),applyMiddleware(thunk,save({ states:[\"TasksAccountsReducer\"]})));\r\nexport default store;","// Контекст из Реакта. Предназначен для передачи параметров элементам внутри формы\r\nimport {createContext} from \"react\"\r\nconst FormData = createContext({});\r\nexport default FormData\r\n","import React from \"react\"\r\nimport FormData from \"./FormData\"\r\nimport css from \"./account.module.css\"\r\n\r\n/**\r\n * Элемент формы input с выводом ошибки\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nexport function Input(props) {\r\n    return <FormData.Consumer>\r\n        {\r\n            context => <><input\r\n                {...props.input}\r\n                placeholder={props.label}\r\n                type={props.type}\r\n                disabled={context.disabled || props.disabled}\r\n                onChange={(e) => {\r\n                    props.input.onChange(e)\r\n                }}\r\n            />\r\n                {props.meta.touched &&\r\n                ((props.meta.error && <span className={css.error}>{props.meta.error}</span>) ||\r\n                    (props.meta.warning && <span className={css.warning}>{props.meta.warning}</span>))}\r\n            </>\r\n        }\r\n    </FormData.Consumer>\r\n}\r\n\r\n/**\r\n * Простой инпут без интеграции с redux form.\r\n * Предназначен для задания дополни тельных параметров кнопкам\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nexport function SimpleInput(props) {\r\n    return (\r\n    <FormData.Consumer>\r\n        {(context) => <input\r\n            { ...props}\r\n            disabled={context.disabled || props.disabled}\r\n        /> }\r\n    </FormData.Consumer>)\r\n}","import React, {useEffect,useState} from \"react\";\r\nimport { Field, FieldArray, Form, initialize, reduxForm} from \"redux-form\";\r\nimport css from \"./account.module.css\"\r\nimport store from \"../../redux/mystore\";\r\nimport {Provider} from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\nimport {Input, SimpleInput} from \"./elements\"\r\nimport FormData from \"./FormData\"\r\nimport validate from \"./validate\"\r\n\r\n/**\r\n * Вывод списка наименований через FieldsArray\r\n * @param props\r\n * @returns {*}\r\n */\r\nfunction NamesList(props) {\r\n\r\n    let [lockBtn,setLockBtn] = useState(false);\r\n    useEffect(()=>{\r\n        if(props.fields.length === 1) setLockBtn(true);\r\n        else if(props.fields.length > 1) setLockBtn(false);\r\n    },[props.fields.length]);\r\n\r\n    function pushEmptyElement(e, index) {\r\n        if (e.target.value && index === (props.fields.length - 1)) props.fields.push(\"\")\r\n    }\r\n\r\n    function removeElement(index) {\r\n        if (props.fields.length > 1) props.fields.remove(index)\r\n    }\r\n\r\n\r\n    return <div>\r\n        {props.fields.map((el, index) =>\r\n            <div key={index}>\r\n                <Field component={Input} name={el} onChange={e => pushEmptyElement(e, index)}/>\r\n                <SimpleInput type=\"button\" disabled={lockBtn} value=\"X\" onClick={() => removeElement(index)}/>\r\n            </div>)\r\n        }\r\n        {props.meta.error && <div className={css.error}>{props.meta.error}</div>}\r\n    </div>\r\n}\r\n\r\n/**\r\n * Таблица дополнительных параметров\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction Params(props) {\r\n\r\n    let [lockBtn,setLockBtn] = useState(false);\r\n    useEffect(()=>{\r\n        if(props.fields.length === 1) setLockBtn(true);\r\n        else if(props.fields.length > 1) setLockBtn(false);\r\n    },[props.fields.length]);\r\n\r\n    function removeElement(index) {\r\n        if (props.fields.length > 1) props.fields.remove(index)\r\n    }\r\n\r\n    function pushEmptyElement(e, index) {\r\n        if (e.target.value && index === (props.fields.length - 1)) props.fields.push([\"\", \"\"])\r\n    }\r\n\r\n\r\n\r\n    return <table>\r\n        <tbody>\r\n        {props.fields.map((el, index) => <tr key={index}>\r\n                <FieldArray onChange={(e) => {\r\n                    pushEmptyElement(e, index)\r\n                }} component={Param} name={el}/>\r\n                <td><SimpleInput disabled={lockBtn} type={\"button\"} value={\"X\"} onClick={() => {\r\n                    removeElement(index)\r\n                }}/></td>\r\n            </tr>\r\n        )}\r\n        </tbody>\r\n    </table>\r\n}\r\n\r\nfunction Param(props) {\r\n\r\n    let out = props.fields.map((el, index) => <td key={index}><Field onChange={(e) => props.onChange(e)}\r\n                                                                     component={Input} name={el}/></td>);\r\n    return <>{out}</>\r\n}\r\n\r\n/**\r\n * Форма счета.\r\n * ##Пункты:\r\n * - Список наименований с возможностью удаления и добавления\r\n * - Общая цена\r\n * - Дата активации и дата акцепта (только чтение)\r\n * - Таблица дополнительнеых параметров типа ключ - значение\r\n * - Кнопки принять, отменить\r\n * Сообщения могут быть выданы синхронной валидацией.\r\n * Блокировка клавиш и полей через селекторы redux-form и возможно action creaters\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction AccountForm(props) {\r\n    let {handleSubmit} = props;\r\n\r\n    return <Form onSubmit={handleSubmit}>\r\n            <div>\r\n                <h3>List of names:</h3>\r\n                <FieldArray component={NamesList} name={\"names\"}/>\r\n            </div>\r\n            <div>\r\n                <h3>Price:</h3>\r\n                <Field component={Input} name={\"price\"}/>\r\n            </div>\r\n            <div>\r\n                <h3>Parameters</h3>\r\n                <FieldArray component={Params} name={\"params\"}/>\r\n            </div>\r\n            <SimpleInput disabled={!props.valid} type={\"submit\"}/>\r\n            <input type={\"button\"} value={\"exit\"} onClick={props.exit}/>\r\n    </Form>\r\n}\r\n\r\n// HOC AccountReduxForm Он необходим для корректной работы ReduxForm\r\nconst Formed = reduxForm({form: \"account\", initialValues: {name: \"1234\"}, validate})(AccountForm);\r\nlet AccountReduxForm = (props) => <Provider store={store}><Formed { ...props} /></Provider>;\r\n\r\n/**\r\n * Компонент страницы, на которой выводится форма и заносятся ее данные.\r\n * TODO Преобразовать в классовый\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction Account(props) {\r\n    let isAccepted = props.match.params.id !== undefined;\r\n    let id = props.match.params.id !== undefined ? props.match.params.id : props.currentAccountId;\r\n    let account = props.accounts[id];\r\n    let timeData = \"\",timeString = \"\";\r\n    /*\r\n        Подготовка массива names - списка покупок в том числе из наборов, перечисленных через запятую вида\r\n        Макароны, яйца, помидоры, майонез\r\n     */\r\n    let names = [], ids = [], rawNames = [];\r\n    // Эта ошибка возникает при перезагрузке страницы. Идут неверные параметры\r\n    // Решение - редирект\r\n    try {\r\n        rawNames = account.tasks.map((el) => ({name: props.tasks[el].name, id: props.tasks[el].id}));\r\n        timeData = moment(account.time).format(\"YYYY-MM-DD\");\r\n        timeString = moment(account.time).format(\"DD.MM.YY\");\r\n    } catch (err) {\r\n        props.history.push(\"/\")\r\n    }\r\n    for (let i = 0; i < rawNames.length; i++) {\r\n        rawNames[i].name.split(\",\").forEach(el => {\r\n            names.push(el);\r\n            ids.push(rawNames[i].id)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Формирует объект для запуска actionCreater Accept\r\n     * Этот объект содержит обновленный набор names вида [Идентификатор элемента tasks, Идентификатор элемента tasks ...]\r\n     * и прочие параметры\r\n     * @param values\r\n     */\r\n    function accept(values){\r\n\r\n        props.accept(id,values,names,ids);\r\n        props.history.push(\"/\")\r\n    }\r\n\r\n    // Инициализация данных формы ввода при создании\r\n    useEffect(() => {\r\n        store.dispatch(initialize(\"account\", {names: [...names, \"\"],price:account.price, params: [[\"NN\", \"221\"], [\"\", \"\"]]}))\r\n    }, [names]);\r\n\r\n    return <div className={css.account}>\r\n        <h2>Account №: {id}</h2>\r\n        <time dateTime={timeData}>{timeString}</time>\r\n        <FormData.Provider value={{disabled:isAccepted}}>\r\n            <AccountReduxForm\r\n                onSubmit={accept}\r\n                exit={()=>{props.history.push(\"/\")}}  // Возврат на верхний уровень без сохранения\r\n            />\r\n        </FormData.Provider>\r\n    </div>\r\n}\r\n\r\nexport default Account;","\r\nexport default function validate(value) {\r\n    let errors = {};\r\n    if(isNaN(Number(value.price))){\r\n        errors.price = \"Must be number\";\r\n        errors._error = \"Isn`t correct price!\"\r\n    }\r\n    if(value.names&&!value.names.some(el=>el!==\"\")){\r\n        errors.names = {_error:\"At least one name must be imputed\"};\r\n        errors._error = \"Name is uncorrected\"\r\n    }\r\n    return errors;\r\n}","import Account from \"./Account\"\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport actor from \"../../redux/actor\";\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        tasks: state.TasksAccountsReducer.tasks,\r\n        accounts: state.TasksAccountsReducer.accounts,\r\n        currentAccountId: state.TasksAccountsReducer.newAccountId,\r\n        newTaskId:state.TasksAccountsReducer.nextTaskId,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n  accept: actor.accept\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(Account));","import React from 'react';\r\nimport Header from './components/Header'\r\nimport HomeWraper from './components/home/HomeWraper'\r\nimport Categories from \"./components/categories/Categories\";\r\nimport InfoContainer from \"./components/info/InfoContainer\"\r\nimport Help from \"./components/Help\";\r\nimport Account from \"./components/Account/accountContainer\";\r\nimport { HashRouter, Route} from \"react-router-dom\";\r\nimport css from './app.module.css';\r\nimport store from './redux/mystore'\r\n\r\nfunction App() {\r\n    window.store=store;\r\n    return (\r\n        <div className={css.App}>\r\n            <HashRouter>\r\n                <Header/>\r\n                <div className={css.content}>\r\n                    <Route exact path=\"/\" render={()=><HomeWraper store={store} />} />\r\n                    <Route path=\"/categories\" render={Categories}/>\r\n                    <Route path=\"/info\" render={()=><InfoContainer store={store} />}/>\r\n                    <Route path=\"/help\" render={Help}/>\r\n                    <Route path=\"/account/:id?\" render={()=><Account store={store}/>} />\r\n                </div>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"info_info__2-xHk\",\"infoTb\":\"info_infoTb__3Qvyx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"account\":\"account_account__2J1PN\",\"error\":\"account_error__Ky-iK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"entry\":\"Entry_entry__3uJUh\",\"textContainer\":\"Entry_textContainer__COK4t\",\"btnContainer\":\"Entry_btnContainer__1Vhgg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"home_home__2gKgJ\",\"dateSelect\":\"home_dateSelect__2O5yz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"app_App__V0uA5\",\"content\":\"app_content__rQ5EC\"};"],"sourceRoot":""}